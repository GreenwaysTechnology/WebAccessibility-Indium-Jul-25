												Web Accessibility
**************************************************************************************************************************************************************
How to design Web?

HTML,CSS + JavaScript

Design fundamentals:

1.layout
   fixed width (before 2007), responsive, grid, flex
2.colors and themes
3.fonts 
4.images and videos

IS there any specification for designing web?

What is specification or spec?

Set of rules and regulations followed

Is there is any spec is available for web?
Yes---WCAG  - Web content Accessibility Guideline
************************************************************************************************************************************************************


								‚ÄúThe power of the Web is in its universality.
						Access by everyone regardless of disability is an essential aspect.‚Äù
												By
						Tim Berners-Lee, W3C Director and inventor of the World Wide Web


Versions of WCAG:

WCAG 2.0 - old version 
  core accessibility principles - POUR
WCAG 2.1 - new Version
     Adds support for mobility, low vision, cognitive disability
WCAG 2.2 - Latest version
    Extends 2.1 with focus on cognitive, learning, fine motor disability 
*********************************************************************************************************************************************************
								   Accessibility Compliance
*******************************************************************************************************************************************************
The WCAG define three levels of compliance , to measure how accessible a website or digital content is


Level                                                       Meaning                                           who benefits

A                                                  Minimum Accessibility                               Essential for people with sever and normal disabilities 


AA	                                            Recommended level                                Address major barriers for most users

AAA                                            Advanced level accessibility                    Focus all types of disabilities , it is very hard to achieve 

Educational 
AAA -  w3c.org,gov.uk,bbc,university of Cambridge/ hard vard /MIT

AA
india.gov.in
usa.gov
apple
Microsoft
google
LinkedIn
salesforce
************************************************************************************************************************************************************
										Coding

WCAG 2.1/2.2. Level A:

Check list
Basic HTML Design for Level -A Accessibility:
...........................................................................

create html project

>mkdir myweb

basic html template
index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Heading</title>
</head>
<body>
    
</body>
</html>
					
How to run?
 we are going to install web server in vscode as plugin. - live server			 


Guide Line 

1.Should be meaning full.
  Here title 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Accessibility Guide Line Training</title>
</head>
<body>
    
</body>
</html>

2.Use Semantic HTML Elements as much as possible

Semantic Elements  = Elements with a meaning

A semantic element clearly defines its meaning to both the browser and the developers and also users(disability Users)

Semantic elements are used to design web layouts.

1.header
2.footer
3.main
4.nav
5.section
6.aside
7.figcaption
8.summary
9.time
10.figure
12.mark
13.article

Other elements
button
img
label
form
input

Avoid Using div, span for layout purpose

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Accessibility GuideLine Training</title>
</head>

<body>
    <header>
        <h1>Welcome to Accessibility</h1>
        <nav>
            <a href="#home">Home</a>
        </nav>
    </header>
    <main>
        <section>
            <h2>About Accessibility</h2>
        </section>
        <section>
            <h2>About Disabilities</h2>
        </section>
    </main>
    <footer>
        <nav>
            <a href="#contactus">Contact us</a>
        </nav>
    </footer>
</body>

</html>
***********************************************************************************************************************************************************
											Big Picture of Web Accessibility
									  Easy Checks - A First Review of Web Accessibility


"Easy Checks ‚Äì A First Review of Web Accessibility" is a practical guide developed by the W3C Web Accessibility Initiative (WAI) to help anyone (not just experts) quickly check the accessibility of a web page.

üåê What is "Easy Checks"?
	It's a preliminary evaluation method that helps you identify basic accessibility barriers on web pages.
      It doesn‚Äôt replace full accessibility audits, but it‚Äôs great for:

1.Spot-checking websites
2.Raising awareness about accessibility
3.Getting quick wins before deeper evaluation

‚úÖ Key Accessibility Areas Covered in Easy Checks:

1.Page Title
2.Image text alternatives(alt text") (pictures, illustrations, charts etc)
3.Text
    Headings
    Contrast ratio (color contrast)
    Resize text
4.Interaction
     Keyboard access and visual focus
     Forms, labels, and errors (including search fields)
5. General
      Moving ,flashing or blinking content
      Multimedia (video,audio) alternatives
      Basic Structure check - Semantic Elements 

Page Title:
..................

Check:
  1.Does every page have a clear, unique title?
   Why: Helps screen reader users and improves navigation.
Tips:
   1.Always look at title when you design a page - You have to audit manually

Image text alternatives:
.......................................
1.Text alternatives ("alt text") convey the purpose of an image, including pictures, illustrations, charts, etc.
2.Text alternatives are used by people who do not see the image. (For example, people who are blind and use screen readers can hear the         alt text read out; and people who have turned off images to speed download or save bandwidth can see the alt text.)
3.The text should be functional and provide an equivalent user experience, not necessarily describe the image. (For example, appropriate        text alternative for a search button  would be "search", not "magnifying glass".)
4.You don't usually see the alt text on a web page, it is in the web page markup (like this:
<img src="pointer_to_image.png" alt="here's where the alternative text goes">).
Every image should include alt in the markup.
5.If an image conveys information useful for interacting with or understanding the web page content, then it needs alternative text.
6.If an image is just decorative and people don't need to know about the image, then it should have null alt (alt="").
Automated tests can tell you if alt is missing. To determine if the alternative text is appropriate, you need to see the image and judge it in context.

How to check / verify the web site or page images has alt attribute?

There are various ways to check:

1.Using browser dev tool called img  - browser specific
    In the toolbar you can select "images" - if browser does not have this option
2.To check alt text with any browser
     WAVE - tool

	WAVE¬Æ is a suite of evaluation tools that helps authors make their web content more accessible to individuals with disabilities.
       WAVE can identify many accessibility and Web Content Accessibility Guideline (WCAG) errors, but also facilitates human evaluation of                     web content.
How to use Wave?

1.You can use wave directly
     https://wave.webaim.org/
2.You can install wave browser plugin

Wave Summary Report:

1.Errors
2.Contrast Errors
3.Alerts
4.Features
5.Structural Elements
6.ARIA

************************************************************************************************************************************************************
1.Errors:
 1.1. Issues that will impact certain users with disabilities
 1.2.Failures to meet WCAG

Error Report:

Errors
   Missing alternative text

What It Means
	Image alternative text is not present.

Why It Matters
	Each image must have an alt attribute. Without alternative text, the content of an image will not be available to screen reader users or 	when the image is unavailable.

How to Fix It
	Add an alt attribute to the image. The attribute value should accurately and succinctly present the content and function of the image. If the content of the image is conveyed in the context or surroundings of the image, or if the image does not convey content or have a function, it should be given empty/null alternative text (alt="").

The Algorithm... in English
	An image does not have an alt attribute.
Standards and Guidelines
    1.1.1 Non-text Content (Level A)

Task:
  1.Create a sample web page , having some images, test without alt attribute and add alt attribute and also test
    Using wave 
eg:
   <img src="banner.jpg">
************************************************************************************************************************************************************
										Contrast Errors
									      (Very low contrast)
************************************************************************************************************************************************************
1.Text that does not meet WCAG contrast requirements

What It Means:
	Very low contrast between text and background colors.

Why It Matters
         Adequate contrast of text is necessary for all users, especially users with low vision.

How to Fix It
	Increase the contrast between the foreground (text) color and the background color.
        Large text (larger than 18 point or 14 point bold) does not require as much contrast as smaller text.

The Algorithm:

	   Text is present that has a contrast ratio less than 4.5:1, or large text (larger than 18 point or 14 point bold) has a contrast ratio less than 3:1.
		 WCAG requires that page elements have both foreground AND background colors defined (or inherited) that provide sufficient contrast. When text is presented over a background image, the text must have a background color defined (typically in CSS) that provides adequate text contrast when the background image is disabled or unavailable. 

		WAVE does not identify contrast issues in text with CSS transparency, gradients, or filters.
                WCAG Level AAA requires a contrast ratio of at least 7:1 for normal text and 4.5:1 for large text.

How to give right contrast colors to elements?
  Will discuss later
************************************************************************************************************************************************************
												3.Alerts
************************************************************************************************************************************************************  1.That may cause accessibility issues
2. A Evaluator must decide the impact

Report:

1.Redundant alternative text
   
  " The alternative text for an image is the same as nearby or adjacent text."

<div class="a-section a-spacing-none _fluid-quad-image-label-v2_style_fluidImageContainer__2SOMr">
<img alt="Refrigerators that is sold" src="https://images-eu.ssl-images-amazon.com/images/G/31/IMG15/Irfan/GATEWAY/MSO/Appliances-QC-PC-186x116--B08345R1ZW._SY116_CB667322346_.jpg" class="_fluid-quad-image-label-v2_style_fluidLandscapeImage__2euAK _fluid-quad-image-label-v2_style_fluidImage__gTBjA" data-a-hires="https://images-eu.ssl-images-amazon.com/images/G/31/IMG15/Irfan/GATEWAY/MSO/B08345R1ZW---372x232._SY232_CB667322346_.jpg">

</div>

<div class="a-section a-spacing-none _fluid-quad-image-label-v2_style_imageLabel__3ANSV aok-inline-block aok-align-center">
<span class="a-size-small a-color-base truncate-2line">
        Refrigerators 
</span></div>

2.A nearby image has the same alternative text

<img alt="BHAAKUR Cotton Jhabla Set for Infants and Toddlers | Snap Buttons Jabla |Soft Mulmul |Breathable and Comfortable | Top..." src="https://m.media-amazon.com/images/I/51mInU4fLEL._AC_SY200_.jpg" class="product-image" height="200px" data-a-hires="https://m.media-amazon.com/images/I/51mInU4fLEL._AC_SY400_.jpg">

3.Long alternative text
   <img alt="Napoleon Travel Q 285 Portable Gas Grill ‚Äì 2-Burner LPG BBQ Cast Iron Cooking Grates, JETFIRE Ignition, Folding Legs &amp;..." src="https://m.media-amazon.com/images/I/51JG2awjdfL._AC_SY200_.jpg" class="product-image" height="200px" data-a-hires="https://m.media-amazon.com/images/I/51JG2awjdfL._AC_SY400_.jpg">

4.Orphaned form label

Not Good
<label id="captions-foreground-color-vjs_video_3_component_777" class="vjs-label">
       Color
</label>

Good:
<form>	
<label id="captions-foreground-color-vjs_video_3_component_777" class="vjs-label">
       Color
</label>
	<input type="text" for="captions-foreground-color-vjs_video_3_component_777">
</form>

5.Unlabeled form control with title

What It Means
A form control does not have a label, but has a title.

Why It Matters
	The title attribute value for unlabeled form controls will be presented to screen reader users. 
	However, a properly associated text label provides better usability and accessibility and should be used unless the purpose of the form control is intuitive without the label.

How to Fix It
If a visible text label is available for the form control, associate the text label to the form control using the label element. 
This provides additional functionality for end users because if the label is clicked it will set focus to the form control. If the form control is intuitive without a <label>, the title attribute value may be used.
Note that the title attribute value will not generally be read by a screen reader if the control has a label and may not be available to sighted users, particularly keyboard-only users.

Standards and Guidelines
...............................................
    1.1.1 Non-text Content (Level A)
    1.3.1 Info and Relationships (Level A)
    2.4.6 Headings and Labels (Level AA)
    3.3.2 Labels or Instructions (Level A)
****************
6. Missing first level heading

What It Means
	A page does not have a first level heading.

Why It Matters
	Headings facilitate page navigation for users of many assistive technologies. 
	They also provide semantic and visual meaning and structure to the document. 
        A first level heading (<h1>) should be present on nearly all pages. 
        It should contain the most important heading on the page (generally the document title).

How to Fix It
       If the page presents a main heading, place it within an <h1> element. Add other sub-headings as necessary.

Standards and Guidelines

    1.3.1 Info and Relationships (Level A)
    2.4.6 Headings and Labels (Level AA)

Skipped heading level:

What It Means
      A heading level is skipped.

Why It Matters
       Headings provide document structure and facilitate keyboard navigation by users of assistive technology. 
       These users may be confused or experience difficulty navigating when heading levels are skipped.

How to Fix It
        Restructure the document headings to ensure that heading levels are not skipped.

Standards and Guidelines
    1.3.1 Info and Relationships (Level A)
    2.4.1 Bypass Blocks (Level A)
    2.4.6 Headings and Labels (Level AA)

Noscript element:

What It Means
       A <noscript> element is present.
Why It Matters
          Content within <noscript> is presented if JavaScript is disabled. Because nearly all users (including users of screen readers and other assistive technologies) have JavaScript enabled, <noscript> cannot be used to provide an accessible version of inaccessible scripted content.

How to Fix It
            Ensure that scripted content is accessible. The <noscript> content will be presented to very few users, but must be accessible if used.

Device dependent event handler:

What It Means
     An event handler is present that may not be accessible.

Why It Matters
         The JavaScript events in use do not appear to be accessible to both mouse and keyboard users. 
          To be fully accessible, critical JavaScript interaction should be device independent.

How to Fix It
        Ensure that critical functionality and content is accessible by using a device independent event handler (which responds to both keyboard and mouse) or by using both a mouse dependent and a keyboard dependent event handler.

Very small text

What It Means
      Text is very small.
Why It Matters
       Text which is very small is difficult to read, particularly for those with low vision.
How to Fix It
            Increase the text to a more readable size.

Redundant title text:

What It Means
	Title attribute text is the same as text or alternative text.

Why It Matters
	The title attribute value is used to provide advisory information. It typically appears when the users hovers the mouse over an element. The advisory information presented should not be identical to or very similar to the element text or alternative text.

How to Fix It
	In most cases the title attribute can be removed, otherwise modify it to provide advisory, but not redundant information. Note that the title text may or may not be read by a screen reader and is typically inaccessible to sighted keyboard users. 

Layout table:
What It Means
   A layout table is present.
Why It Matters
      Layout tables exist merely to position content visually - to create columns, insert spacing, or align content neatly for sighted users. Their content is not at all tabular in nature. Layout tables should not be used in HTML5. They can introduce reading and navigation order issues. Screen readers may interpret them as data tables (i.e., announcing column and row numbers), especially if they contain table header (<th>) cells. This introduces significant overhead on screen reader users.

How to Fix It
      In almost every case, layout tables can be replaced with other HTML elements and styled with CSS to achieve the desired visual presentation. If the table contains tabular data, provide appropriate header (<th>) cells. If the layout table remains, verify that the reading and navigation order of table content (based on underlying source code order) is logical and give it role="presentation" to ensure it is not identified as a table to screen reader users.
***********************************************************************************************************************************************************
										   Features
************************************************************************************************************************************************************
Elements that improve accessibility when implemented correctly.

1.Null or empty alternative text:

What It Means
              Alternative text is null or empty (alt="").

Why It Matters
                If an image does not convey content or if the content of the image is conveyed elsewhere (such as in a caption or nearby text), the image should have empty/null alternative text (alt="") to ensure that it is ignored by a screen reader and is hidden when images are disabled or unavailable.

How to Fix It
         Ensure that the image does not convey content or that the content of the image is conveyed in nearby text (e.g., a caption).

2.Linked image with alternative text

What It Means
	Alternative text is present for an image that is within a link.
Why It Matters
		Including appropriate alternative text on an image within a link ensures that the function and purpose of the link and the content of the image is available to screen reader users or when images are unavailable.

How to Fix It
		Ensure that the alternative text presents the content of the image and/or the function of the link. If the full content and function of the link is presented in text within the link (an image and a text caption both within the same link, for example), then the image should generally be given empty/null alternative text (alt="") to avoid redundancy.

3.Form label

What It Means
	A form label is present and associated with a form control.
Why It Matters
	A properly associated form label is presented to a screen reader user when the form control is accessed. Additionally, a label can be clicked with the mouse to set focus to the form control.

How to Fix It
	Ensure that the label is accurate, descriptive, succinct, and that it is associated with the correct form control element.

4.Fieldset

What It Means
	A fieldset is present.
Why It Matters
	A fieldset provides a visual and structural grouping of related form elements. If present, a fieldset legend presents a description of the grouped form elements to screen reader users. A fieldset and legend are typically necessary for groups of check boxes or radio buttons.

How to Fix It
	Ensure that the fieldset encloses the proper form elements. Most fieldsets should have an accurate, descriptive, and succinct legend. Note that the legend is repeated to screen reader users for each form control within the fieldsets.

5.Language

What It Means
	The language of the document or a page element is identified.
Why It Matters
	Identifying the language of the page or portion of page (if different from the page itself) allows screen readers to read the content appropriately.

How to Fix It
	Ensure the language is properly identified for the page (e.g., <html lang="en">). If content within the page is in a language different than the page's language, identify it using a valid lang attribute value (e.g., <p lang="fr">).
**********************************************************************************************************************************************************
												Structural Elements
**********************************************************************************************************************************************************1  1.Shows Pages HTML and ARIA Regions
2. identifies hidden elements
3. Lists regions and headings in order
4. indicates nesting of any page elements

Headings:
...........
   Web pages often have sections of information separated by visual headings, for example, heading text is bigger and bold.
 
    To make these work for everyone, the headings need to be marked up.
    That way people can navigate to the headings ‚Äî including people who cannot use a mouse and use only the keyboard, and people who                 	use a screen reader.

Heading levels should have a meaningful hierarchy, e.g.:

    Heading Level 1 <h1>
        Heading Level 2 <h2>
            Heading Level 3 <h3>
            Heading Level 3 <h3>
        Heading Level 2 <h2>
            Heading Level 3 <h3>
                Heading Level 4 <h4>
                Heading Level 4 <h4>
        Heading Level 2 <h2>

Heading level 2:

What It Means
	A second level heading (<h2> element) is present.
Why It Matters
	Headings facilitate page navigation for users of assistive technologies. They also provide semantic and visual meaning and structure to the document.

How to Fix It
	Ensure that the text in question is truly a heading and that it is structured correctly in the page outline.

What to check for:

   1.The page has a heading. In almost all pages there should be at least one heading.
    2.All text that looks like a heading is marked up as a heading.
   3. All text that is marked up as a heading is really a conceptual section heading.
    4.The heading hierarchy is meaningful. Ideally the page starts with an "h1" ‚Äî which is usually similar to the page title ‚Äî and does not skip                                                                                 levels; however, these are not absolute requirements.

How to test proper heading flow?

Wave tool - This tells that we have used headings  under structural elements

W3C HTML validator - tool

https://validator.w3.org/nu/#file

Source:
<!DOCTYPE html>‚Ü©
<html lang="en">‚Ü©
‚Ü©
<head>‚Ü©
    <meta charset="UTF-8">‚Ü©
    <meta name="viewport" content="width=device-width, initial-scale=1.0">‚Ü©
    <title>Headings Test</title>‚Ü©
</head>‚Ü©
‚Ü©
<body>‚Ü©
    <!-- <div>‚Ü©
        <h1>Header-1</h1>‚Ü©
        <h2>Header-2</h2>‚Ü©
        <h3>Header-3</h3>‚Ü©
        <h4>Header-4</h4>‚Ü©
        <h5>Header-5</h5>‚Ü©
‚Ü©
    </div> -->‚Ü©
    <div>‚Ü©
        <h3>Header-3</h3>‚Ü©
        <h5>Header-5</h5>‚Ü©
        <h1>Header-1</h1>‚Ü©
        <h2>Header-2</h2>‚Ü©
        <h4>Header-4</h4>‚Ü©
‚Ü©
    </div>‚Ü©
</body>‚Ü©
‚Ü©
</html>

Outline
The output as per code:

<h1> [missing]
<h2> [missing]
<h3> Header-3
<h4> [missing]
<h5> Header-5

Recommended output

<h1> Header-1
	<h2> Header-2	
	<h3> [missing]
	<h4> Header-4

Wave Test Tool Result:
.......................................
Alerts:

Skipped heading level:
What It Means
	A heading level is skipped.
Why It Matters
	Headings provide document structure and facilitate keyboard navigation by users of assistive technology. These users may be confused or experience difficulty navigating when heading levels are skipped.

How to Fix It
	Restructure the document headings to ensure that heading levels are not skipped.

Solution:
    <main>
        <h1>Header-1</h1>
        <h2>Header-2</h2>
        <h3>Header-3</h3>
        <h4>Header-4</h4>
        <h5>Header-5</h5>
    </main>
*********************************************************************************************************************************************************
										Resize  Text
************************************************************************************************************************************************************
Some people need to enlarge web content in order to read it. Some need to change other aspects of text display: font, space between lines, and more.

Most browsers allow users to change text size through:

    text size settings (usually through Options or Preferences)
    text-only zoom
    page zoom (which also zooms images, buttons, etc.)

When pages are not designed properly, they can be unusable when the text size is changed, especially when it is changed through text-only zoom or text settings. Sometimes columns and sections overlap, the space between lines disappears, lines of text become too long, or text disappears.


What to do:
    Increase the text size.

What to check for:
    All text gets larger. (A common problem is that text is not provided as actual text format but instead the text is in an image. Text in images does not get larger when users increase text size.)
    Text doesn't disappear or get cut off.
    Text, images, and other content do not overlap.
    All buttons, form fields, and other controls are visible and usable.
    Horizontal scrolling is not required to read sentences or "blocks of text". It is best practice that when text size is increased, all the text in a sentence is visible. It is acceptable to have to scroll horizontally to get to different sections of a page. (For top-to-bottom languages, change "horizontal scrolling" to "vertical scrolling".)

Resize text checks

The instructions below are for text-only zoom. You can also change the text size settings, for example, through Tools > Options or Preferences. To keep this simple, we don't include instructions for changing those settings. We also don't include instructions for page zoom because it does not usually reveal the accessibility barriers described above.


To check text-only zoom in Firefox

    Set zoom to text only.
        From the menubar, select View > Zoom > Zoom Text Only.
        Or, with the keyboard: Alt+V, Z, T
    Increase zoom to 200%.
        To incrementally increase zoom with the keyboard:
            Windows, press Ctrl+[+] (hold down the control key and press the + key at the same time).
            On Mac, press command+[+] (hold down the command key and the + key at the same time).
        Usually 4-6 key presses gets to 200%.
        To check or set the zoom percent from the menu option:
            Click the menu button.
            Firefox customization menu zoom percent settings.
            In the customization menu, click the + button to zoom larger. The number before the + button is the current zoom percent.

**********************************************************************************************************************************************************
										Interaction
**********************************************************************************************************************************************************
How people interact with web

1.Keyboard access and visual focus
2.Forms,labels, and errors(including search fields)


Keyboard access and visual focus:
...........................................................

1.Many people cannot use a mouse and rely on the keyboard to interact with the Web. 
2.People who are blind and some sighted people with mobility impairments rely on the keyboard or on assistive technologies and strategies that rely on keyboard commands, such as voice input. 
3.Accessible websites enable people to access all content and functionality ‚Äî links, forms, media controls, etc. ‚Äî through a keyboard.
4.Keyboard focus should be visible and should follow a logical order through the page elements
5.. Visible keyboard focus could be a border or highlight, as shown below, that moves as you tab through the web page.
	
       Menu
		
			---------
			Home
		        -----------
			Services
			Customers

What to do:

In a browser that supports keyboard navigation with the Tab key (for example, Firefox, IE, Chrome, and Safari; not Opera):

    In Mac browsers, enable keyboard navigation to all controls.
        In newer browsers: Select System Preferences > Keyboard > Shortcuts. Select the "All controls" option button.
        In older browsers: Select System Preferences > Keyboard > Keyboard Shortcuts. In the "Full Keyboard Access" section, check "All Controls".
    (In Windows browsers, you don't need to do this step.)
    Click in the address bar, then put your mouse aside and do not use it.
    Press the 'Tab' key to move through the elements on the page. You can press 'Shift-Tab' to go backwards.
    To move within elements such as drop-down lists and menu bars, press the arrow keys.
    To select a specific item within a drop-down list:
        Tab to the list box,
        use the arrow keys to move the focus to items,
        when an item has focus, press the Enter key or Space bar to select that item.


What to check for:

    Tab to all: Check that you can tab to all the elements, including links, form fields, buttons, and media player controls. (A common problem is that you cannot tab to media player controls.)

    Tab away: Check that you can tab away from all elements that you can tab into. (A common problem is the keyboard focus gets caught in media controls and you cannot get out; it's called the "keyboard trap".)

    Tab order: Check that the tab order follows the logical reading order (e.g., for left-to-right languages: top to bottom, left to right) in sequence.

    Visual focus: Check that the focus is clearly visible as you tab through the elements, that is, you can tell which element has focus, e.g., links have a gray outline around them or are highlighted.

    All functionality by keyboard: Check that you can do everything with the keyboard; that is, you don't need the mouse to activate actions, options, visible changes, and other functionality. (A common problem is that some functionality is available only with mouse hover, and is not available with keyboard focus.)

    Drop-down lists: Check that after you tab into a drop-down list, you can use the arrow keys to move through all the options without triggering an action. (A common problem for drop-downs used for navigation is that as soon as you arrow down, it automatically selects the first item in the list and goes to a new page ‚Äî you cannot get to other items in the list.)

    Image links: Check that when images are links, they have clear visual focus and can be activated using the keyboard (usually by pressing the Enter key).


Key                                                   Function
tab                                                    move forward through focusable elements
Shift+tab						 move backward
Enter/space                                     Activate links buttons form controls
Arrow keys					 Navigate inside controls like menu, sliders, select
Esc                                                   Close modal or menus

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Keyboard Navigation</title>
    <style>
        button,
        a,
        input {
            margin: 10px;
            padding: 10px;
            font-size: 1rem;
        }
    </style>
</head>

<body>
    <header>
        <h1 tabindex="0"> Keyboard Navigation Demo</h1>
    </header>
    <!-- links -->
    <main>
        <a href="#section2">Go to Section 2</a>
        <button>Click</button>
        <input type="text" placeholder="Try something">
        <section id="section2">
            <h2>Section 2</h2>
            <p>This is something</p>
        </section>
    </main>
</body>

</html>

tab index:
   The tab index attribute controls the keyboard navigation order of elements. It ensures that users can navigate your web page using only the keyboard - using tab keyboard.

tabindex = 0        Adds the element to the natural tab order (after native elements)
tabindex= 1         Makes the element focusable only by js (.focus()) method , not by the tab keyword
tabindex =-1      set custom tab order , but should be avoided

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Keyboard Navigation</title>
    <style>
        button,
        a,
        input {
            margin: 10px;
            padding: 10px;
            font-size: 1rem;
        }
    </style>
</head>

<body>
    <header>
        <h1 tabindex="0"> Keyboard Navigation Demo</h1>
    </header>
    <!-- links -->
    <main>
        <a href="#section2" >Go to Section 2</a>
        <button>Click</button>
        <input type="text" placeholder="Try something">
        <section id="section2" tabindex="0">
            <h2 tabindex="0">Section 2</h2>
            <p tabindex="0">This is something</p>
            <p>This is not focused</p>
        </section>
    </main>
</body>

</html>
***********************************************************************************************************************************************************
											ARIA 
								 (Accessible Rich Internet Applications)


WAI-ARIA (Web Accessibility Initiative ‚Äì Accessible Rich Internet Applications) is a specification developed by the W3C (World Wide Web Consortium) to improve the accessibility of web content,, especially dynamic content and advanced user interface controls developed with JavaScript, HTML, and related technologies.

Accessible Rich Internet Applications (ARIA) is a set of  "roles and attributes" that define ways to make web content and web applications (especially those developed with JavaScript) more accessible to people with disabilities.

ARIA supplements HTML so that interactions and widgets commonly used in applications can be passed to assistive technologies when there is not otherwise a mechanism. For example, ARIA enables accessible JavaScript widgets, form hints and error messages, live content updates, and more.

For eg:
  if you develop custom elements in html, if you want to convert that custom element as web accessible  , ARIA helps

Custom Elements:
................................

Two types of elements in html:

1.built in html elements
  eg : div,span,p,h1,img,header,footer,aside etc....
 all built in elements are understood by browser because it is part of html language.
2.custom elements
  custom elements are elements which are developed by developer based on existing elements.
 HTML 5 spec introduced a new feature that extend the functionality of existing html elements and you can add new attributes on existing html elements
<app-drawer></app-drawer>

Why WAI-ARIA?
Modern web apps use dynamic content and custom widgets (e.g., sliders, tabs, modals) that don't have built-in accessibility. 

WAI-ARIA:
	Enhances the semantics of web elements.
	Enables better keyboard navigation.
	Makes custom widgets accessible.
	Helps users with disabilities navigate and interact with the web.
***********************************************************************************************************************************************************
										Before using ARIA
***********************************************************************************************************************************************************
Warning:
      Many of these widgets are fully supported in modern browsers. Developers should prefer using the correct semantic HTML element over using ARIA, if such an element exists.
  For instance, native elements have built-in keyboard accessibility, roles and states. 
  However, if you choose to use ARIA, you are responsible for mimicking the equivalent browser behavior in script.

Rules ARIA use:
...........................

 First Rule of ARIA Use:

	If you can use a native HTML element [HTML] or attribute with the semantics and behavior you require already built in, instead of re-purposing an element and adding an ARIA role, state or property to make it accessible, then do so.
<header> - semantic HTML element
<div> -  need to be converted as header - dont do this, use header itself

Under what circumstances may this not be possible?

	If the feature is available in HTML [HTML] but it is not implemented or it is implemented, but accessibility support is not.
If the visual design constraints rule out the use of a particular native element, because the element cannot be styled as required.
If the feature is not currently available in HTML.

Second Rule of ARIA Use:

Do not change native semantics, unless you really have to.
For example: Developer wants to build a heading that's a tab.

Do not do this:
<h2 role=tab>heading tab</h2>
Do this:
<div role=tab><h2>heading tab</h2></div>

Third Rule of ARIA Use:

All interactive ARIA controls must be usable with the keyboard.
If you create a widget that a user can click or tap or drag or drop or slide or scroll, a user must also be able to navigate to the widget and perform an equivalent action using the keyboard.

All interactive widgets must be scripted to respond to standard keystrokes or keystroke combinations where applicable.

For example, if using role=button the element must be able to receive focus and a user must be able to activate the action associated with the element using both the enter (on WIN OS) or return (MAC OS) and the space key.

Fourth Rule of ARIA Use

Do not use role="presentation" or aria-hidden="true" on a focusable element .
Using either of these on a focusable element will result in some users focusing on 'nothing'.

Do not do this:
<button role=presentation>press me</button>

Do not do this:
<button aria-hidden="true">press me</button>

Note
Applying aria-hidden to a parent/ancestor of a visible interactive element will also result in the interactive element being hidden, so don't do this either:

<div aria-hidden="true">
<button>press me</button>
</div>

Note
If an interactive element cannot be seen or interacted with, then you can apply aria-hidden, as long as it's not focusable. For example:
button {opacity:0}

<button tabindex="-1" aria-hidden="true">press me</button>
Note
If an interactive element is hidden using display:none or visibility:hidden (either on the element itself, or any of the element's ancestors), it won't be focusable, and it will also be removed from the accessibility tree. This makes the addition of aria-hidden="true" or explicitly setting tabindex="-1" unnecessary.

Fifth Rule of ARIA Use:

All interactive elements must have an accessible name.
An interactive element only has an accessible name when its Accessibility API accessible name (or equivalent) property has a value.

For example, the input type=text in the code example below has a visible label 'user name' , but no accessible name:


    user name <input type="text">

    or

    <span>user name</span> <input type="text">
    
The control's MSAA accName property is empty:

In comparison, the input type=text in the code example below has a visible label 'user name' and an accessible name. This example has an accessible name because the input element is a labelable element and the label element is used correctly to associate the label text with the input.

<!-- Note: use of for/id or wrapping label around text
and control methods will result in an accessible name -->

<input type="text" aria-label="User Name">

or

<span id="p1">user name</span> <input type="text" aria-labelledby="p1">
************************************************************************************************************************************************************
										WAI-ARIA Key Concepts
Concept		Description

Roles		Describe the purpose of an element (e.g., button, dialog, navigation).
States		Indicate current conditions (e.g., aria-checked, aria-expanded).
Properties	Provide additional info (e.g., aria-labelledby, aria-describedby).


The above are just "html" attributes only

Types of HTML attributes
1.In built attribute
2.custom attributes

In built attribute:

 <img  src="logo.png" alt="company logo">

img - element
src,alt - attribute - built in
  
all built in properties logic already written inside browser(c program)

 <div  id="id" class="banner"  message="hello">

 message = attribute - custom attribute

How to write logic of message?
 HTML 5 Spec introduced to write logic through java script.

roles , states and properties  were introduced by w3c as part of custom attributes theory into HTML 5
   These attributes will help to improve web accessibility to next level.

role:
      Describe the purpose of an element 

<div role="nameoftherole">
üõ†Ô∏è Common ARIA Roles

| Role                         | Purpose                |
| ---------------------------- | ---------------------- |
| `button`                     | Interactive button     |
| `dialog`                     | Dialog or modal window |
| `navigation`                 | Navigation landmark    |
| `tablist`, `tab`, `tabpanel` | Tabbed interfaces      |
| `alert`                          | Alert message          |

Complete list of ARIA roles:
Abstract Roles (For reference only ‚Äî not used directly in HTML)

| Role          | Description                                                    |
| ------------- | -------------------------------------------------------------- |
| `command`     | Base for roles that initiate actions (`button`, `link`, etc.)  |
| `composite`   | Base for widgets with child elements that act as a single unit |
| `input`       | Base for user input elements                                   |
| `landmark`    | Base for defining content sections                             |
| `range`       | Base for roles with a value in a range (e.g., sliders)         |
| `roletype`    | Base role from which all others inherit                        |
| `section`     | Base for document structure                                    |
| `sectionhead` | Heading roles base                                             |
| `select`      | Base for selectable groups                                     |
| `structure`   | Base for document structure and relationships                  |
| `widget`      | Base for interactive UI                                        |
| `window`      | Base for elements with their own window context                |

 2. Landmark Roles (Help screen reader users navigate)

| Role            | Description                           |
| --------------- | ------------------------------------- |
| `banner`        | Site-wide heading (top of page)       |
| `complementary` | Supports the main content             |
| `contentinfo`   | Footer or metadata                    |
| `form`          | Group of form elements                |
| `main`          | Primary content area                  |
| `navigation`    | Site or section navigation            |
| `region`        | Significant content area with a label |
| `search`        | Search feature section                |

3. Structure Roles
| Role                    | Description                                    |
| ----------------------- | ---------------------------------------------- |
| `article`               | Standalone content like a blog post            |
| `column header`          | Header of a column in a grid or table          |
| `definition`            | Term definition                                |
| `directory`             | List of items with a hierarchical relationship |
| `document`              | Static document content                        |
| `grid`                  | Interactive table/grid                         |
| `gridcell`              | Cell in a grid                                 |
| `group`                 | Group of related items                         |
| `heading`               | Section heading                                |
| `img`                   | Image with a meaningful role                   |
| `list`                  | Group of list items                            |
| `listitem`              | Item in a list                                 |
| `math`                  | Mathematical expression                        |
| `none` / `presentation` | Ignores element in accessibility tree          |
| `note`                  | Supplemental content                           |
| `row`                   | Row in a table or grid                         |
| `rowgroup`              | Group of rows                                  |
| `rowheader`             | Row heading                                    |
| `separator`             | Visual or logical divider                      |
| `table`                 | Tabular data                                   |
| `term`                  | Term in a glossary                             |
| `tooltip`               | Help text that appears on hover/focus          |

Widget Roles (Interactive elements that users operate)

| Role               | Description                            |
| ------------------ | -------------------------------------- |
| `button`           | Clickable button                       |
| `checkbox`         | Checkbox input                         |
| `combobox`         | Editable dropdown with suggestions     |
| `dialog`           | Modal or popup window                  |
| `gridcell`         | Editable or interactive table cell     |
| `link`             | Hyperlink                              |
| `listbox`          | List of selectable items               |
| `menu`             | Menu of commands                       |
| `menuitem`         | Item inside a menu                     |
| `menuitemcheckbox` | Checkbox-style menu item               |
| `menuitemradio`    | Radio-style menu item                  |
| `option`           | Option in a listbox                    |
| `progressbar`      | Displays progress of an operation      |
| `radio`            | Radio button                           |
| `radiogroup`       | Group of radio buttons                 |
| `scrollbar`        | Scroll control                         |
| `searchbox`        | Search input field                     |
| `slider`           | Range input control                    |
| `spinbutton`       | Numeric input with increment/decrement |
| `switch`           | On/off switch                          |
| `tab`              | Selectable tab in a tablist            |
| `tablist`          | Container of tabs                      |
| `tabpanel`         | Panel associated with a tab            |
| `textbox`          | Text input field                       |
| `tree`             | Tree-style list                        |
| `treegrid`         | Hierarchical table/grid                |
| `treeitem`         | Item in a tree                         |

Document and Application Roles:
........................................................
| Role          | Description                                      |
| ------------- | ------------------------------------------------ |
| `application` | Treats area as a standalone app (use cautiously) |
| `document`    | Static read-only content                         |
| `log`         | Real-time log or chat window                     |
| `marquee`     | Continuously updating text                       |
| `status`      | Important status message (not interruptive)      |
| `timer`       | Timer display                                    |
| `tooltip`     | Help text                                        |
| `alert`       | Urgent message (interruptive)                    |
| `alertdialog` | Alert with user response required                |

Live Region Roles (Announce content changes to screen readers)
| Role      | Description                   |
| --------- | ----------------------------- |
| `alert`   | Announces updates immediately |
| `log`     | Sequential updates            |
| `marquee` | Scrolls and announces         |
| `status`  | Non-interruptive updates      |
| `timer`   | Regular countdown display     |
************************************************************************************************************************************************************
											coding
************************************************************************************************************************************************************

banner: header
 <!-- <div>
        <h1>Site Header</h1>
    </div> -->
    <!-- header semantic element is represented inside accessibility tree as "banner" -->
    <!-- <header>
        <h1>Site Header</h1>
     </header> -->
    <div role="banner">
        <h1>Site Header</h1>
    </div>

navigation: -<nav>
<body>
    <div role="banner" tabindex="0">
        <h1>Heading</h1>
    </div>
    <div role="navigation">
        <ul>
            <li>
                <a href="#home">Home</a>
            </li>
            <li>
                <a href="#about">About</a>
            </li>
            <li>
                <a href="#contact">Contact</a>
            </li>
        </ul>
    </div>
</body>

role=main -  <main>
    <div role="main">
        
    </div>

role=button:
    <div role="main">
        <img src="play-button.png" 
        role="button" 
        tabindex="0"
        onclick="alert('img button is clicked')"
        onkeydown="if(event.key==='Enter' || event.key===' ')this.click();"
        alt="This is image button">
    </div>
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										 Tree View Using role="tree"
*********************************************************************************************************************************************************
<!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
    </head>

    <body>
        <div role="banner" tabindex="0">
            <h1>ARIA tree</h1>
        </div>
        <div role="main">
            <ul role="tree" tabindex="0">
                <li role="treeitem" tabindex="0">Accessibility
                    <ul role="group">
                        <li role="treeitem">ARIA</li>
                        <li role="treeitem">Semantic Elements</li>
                        <li role="treeitem">Forms</li>
                    </ul>
                </li>
                <li role="treeitem">Web
                    <ul role="group">
                        <li role="treeitem">HTML</li>
                        <li role="treeitem">CSS</li>
                        <li role="treeitem">Javascript</li>
                    </ul>
                </li>
            </ul>
        </div>
    </body>

    </html>
***********************************************************************************************************************************************************
									Aria -States and Properties
***********************************************************************************************************************************************************

These are dynamic attributes that represent the current state of an element (e.g., expanded, selected, checked).

Toggle and Input States:

| State           | Values                                 | Description                                                           |
| --------------- | -------------------------------------- | --------------------------------------------------------------------- |
| `aria-checked`  | `true`, `false`, `mixed`               | State of a checkbox, menuitemcheckbox, or switch                      |
| `aria-pressed`  | `true`, `false`, `mixed`               | State of a toggle button                                              |
| `aria-selected` | `true`, `false`                        | Selected state (e.g., tab, listbox item)                              |
| `aria-expanded` | `true`, `false`                        | Whether content is expanded or collapsed (e.g., accordion, tree node) |
| `aria-disabled` | `true`, `false`                        | Marks element as disabled (non-interactive)                           |
| `aria-readonly` | `true`, `false`                        | Field cannot be modified but is still focusable                       |
| `aria-required` | `true`, `false`                        | Indicates a field is required                                         |
| `aria-invalid`  | `true`, `false`, `grammar`, `spelling` | Indicates validation error on input                                   |

Visibility and Navigation States

| State          | Values                                                      | Description                                                  |
| -------------- | ----------------------------------------------------------- | ------------------------------------------------------------ |
| `aria-hidden`  | `true`, `false`                                             | Hides the element from assistive technologies                |
| `aria-busy`    | `true`, `false`                                             | Marks a region as loading/updating content                   |
| `aria-current` | `page`, `step`, `location`, `date`, `time`, `true`, `false` | Indicates the current item within a set (e.g., current page) |

 Live Region States

| State           | Values                                 | Description                                                       |
| --------------- | -------------------------------------- | ----------------------------------------------------------------- |
| `aria-live`     | `off`, `polite`, `assertive`           | Priority for updates to be announced                              |
| `aria-atomic`   | `true`, `false`                        | Whether the entire region should be read or just the changed part |
| `aria-relevant` | `additions`, `removals`, `text`, `all` | Types of DOM changes to announce                                  |

*********************************************************************************************************************************************************
									ARIA Properties Cheat Sheet
********************************************************************************************************************************************************			
üìå ARIA properties provide static or contextual information about elements ‚Äî unlike states, they don‚Äôt typically change dynamically.

Labeling & Describing Properties:

| Property           | Value Type      | Description                                                                            |
| ------------------ | --------------- | -------------------------------------------------------------------------------------- |
| `aria-label`       | string          | Defines a **custom accessible name** (overrides native text)                           |
| `aria-labelledby`  | ID reference(s) | References one or more elements that **label** this element                            |
| `aria-describedby` | ID reference(s) | References one or more elements that **describe** this element (e.g., hints, tooltips) |

üß© Relationship Properties
| Property        | Value Type      | Description                                                                             |
| --------------- | --------------- | --------------------------------------------------------------------------------------- |
| `aria-controls` | ID reference(s) | Identifies elements **controlled** by the current element (e.g., tab controls tabpanel) |
| `aria-owns`     | ID reference(s) | Declares elements as **owned** (use when not in the DOM tree hierarchy)                 |
| `aria-flowto`   | ID reference(s) | Defines a custom **reading/navigation order**                                           |

üéöÔ∏è Behavioral Properties
| Property                | Values                                                       | Description                                                              |
| ----------------------- | ------------------------------------------------------------ | ------------------------------------------------------------------------ |
| `aria-haspopup`         | `menu`, `listbox`, `tree`, `grid`, `dialog`, `true`, `false` | Indicates a **popup** element will appear                                |
| `aria-activedescendant` | ID reference                                                 | Identifies the **active child** (used in widgets like combobox, listbox) |
| `aria-autocomplete`     | `inline`, `list`, `both`, `none`                             | Defines type of autocomplete behavior                                    |
| `aria-multiselectable`  | `true`, `false`                                              | Whether **multiple selection** is allowed (e.g., in listbox or grid)     |
| `aria-orientation`      | `horizontal`, `vertical`                                     | Direction of widgets (e.g., tabs, sliders)                               |
| `aria-multiline`        | `true`, `false`                                              | Whether a `textbox` supports **multiple lines**                          |
| `aria-readonly`         | `true`, `false`                                              | Whether the input is **read-only**                                       |

 Live Region Properties (for dynamic content):
| Property        | Values                                 | Description                                       |
| --------------- | -------------------------------------- | ------------------------------------------------- |
| `aria-live`     | `off`, `polite`, `assertive`           | Controls **announcement priority** of updates     |
| `aria-relevant` | `additions`, `removals`, `text`, `all` | What types of **DOM changes** are important       |
| `aria-atomic`   | `true`, `false`                        | Whether the **whole region or part** is announced |
| `aria-busy`     | `true`, `false`                        | Marks content as **loading or updating**          |

 Table/Grid Related Properties
| Property        | Value Type | Description                                      |
| --------------- | ---------- | ------------------------------------------------ |
| `aria-colindex` | integer    | Column index in a table/grid                     |
| `aria-rowindex` | integer    | Row index in a table/grid                        |
| `aria-colcount` | integer    | Total columns                                    |
| `aria-rowcount` | integer    | Total rows                                       |
| `aria-colspan`  | integer    | Number of columns spanned by a cell              |
| `aria-rowspan`  | integer    | Number of rows spanned by a cell                 |
| `aria-level`    | integer    | Hierarchical level (e.g., tree or heading level) |
| `aria-posinset` | integer    | Position in a set (e.g., list item)              |
| `aria-setsize`  | integer    | Total number of items in the set                 |
***********************************************************************************************************************************************************
									label property

To define a label for screen readers that is not visually visible
Used when there is no visible text label, or visual label is not required for screen reader users.

syntax
<element aria-lable="label text"></element>


eg:
    <input type="text" name="name">

When you run wav tool, this is going to throw error

Report:
Missing form label

What It Means
A form control does not have a corresponding label.

Why It Matters
If a form control does not have a properly associated text label, the function or purpose of that form control may not be presented to screen reader users. Form labels also provide visible descriptions and larger clickable targets for form controls.

How to Fix It
	If a text label for a form control is visible, use the <label> element to associate it with its respective form control.
    If there is no visible label, either provide an associated label, add a descriptive title attribute to the form control, or reference the label(s)       using aria-labelledby.
 Labels are not required for image, submit, reset, button, or hidden form controls
************************************************************************************************************************************************************

aria-lable:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>

    <label for="firstname">First name:</label>
    <input type="text" name="firstname" id="firstname">
    <input type="text" name="lastName" aria-label="Enter Your last Name">
    <div role="button" aria-label="Open Menu">

    </div>
</body>

</html>
**********************************************************************************************************************************************************
								                     aria-labledby
***********************************************************************************************************************************************************
By providing accessible name to an element using one or more IDS as labels

References other elements by their id to define a label for the current element
eg:
<span id="FirstName">First Name</span>
 <span id="lastName">Last Name</span>
 <input type="text"  aria-labelledby="FirstName lastName">

You coimbine multiple lables using space-separated id.
Does not provide native lable functionality like click-to-focus - you will need js for this

When to Use:
-When you want to resue existing content as a label
-For Custom ui components that does not support native labels
-To have multiple label texts
************************************************************************************************************************************************************
										aria-describedby
********************************************************************************************************************************************************

It is used to provide additional  descriptive information for screen reader users

Use cases:
1.tool tips or help text
2.Error messages
3.Detailed form field information
4.Additional informations for buttons and images

 <p id="desc1">Enter your Full Name</p>
    <input type="text" aria-describedby="desc1">
    <input type="email" aria-describedby="emailHelp">
    <span id="emailHelp">We will never share your email with anyone else</span>

Screen readers will announce: "Enter Address edit field: We will never share your email with anyone else

  <div role="section">
        <div id="tooltip1" role="tooltip">
            Click to View more Details about Your Account
        </div>
        <button aria-describedby="tooltip1">Info</button>
    </div>
***********************************************************************************************************************************************************
										React with WCAG and ARIA
**********************************************************************************************************************************************************

React Project:
npm create vite@latest
Need to install the following packages:
create-vite@7.0.3
Ok to proceed? (y) y


> npx
> create-vite

|
o  Project name:
|  react-wcag
|
o  Select a framework:
|  React
|
o  Select a variant:
|  JavaScript
|
o  Scaffolding project in G:\Indium\react-wcag...
|
‚Äî  Done. Now run:

  cd react-wcag
  npm install
  npm run dev
***********************************************************************************************************************************************************

Simple Example:

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
// import './index.css'
// import App from './App.jsx'

const Header = () => {

  // return <header>
  //       <h1>Header</h1>
  // </header>
  return <div role="banner" >
    <h1 tabIndex="0">Header</h1>
    <nav>
        <ul>
          <li><a href="">Home</a></li>
        </ul>
    </nav>
  </div>
}


const App = () => {
  return <>
    <Header />
  </>
}


createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

Task:
 Create simple web page which contains header,footer,nav bar,main and sections 
   You can try with semantic elements or with "ARIA Role"
***********************************************************************************************************************************************************
										Toggle Button with Accessibility feature

When the user toggles the button, screen reader users must know that button is toggled - On or Off

role=switch
 Is used to defined custom toggle switch (like on/Off) 

How to track on/off state?
aria-checked =true/false
aria-labledBy /aria-label

import { StrictMode, useState } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'



function ToggleButton() {
  const [isOn, setIsOn] = useState(false)
  const styles = {
    display: 'inline-block',
    padding: '10px 20px',
    background: isOn ? '#4caf50' : '#ccc',
    borderRadius: '20px',
    cursor: 'pointer',
    outline: 'none'

  }
  const toogle = () => setIsOn((prev) => !prev)

  return <>
    <header tabIndex={0}>Header</header>
    <div
      role="switch"
      aria-checked={isOn}
      tabIndex={0}
      style={styles}
      onKeyDown={(e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault()
          toogle()
        }
      }}
      onClick={toogle}
    >
      {isOn ? 'ON' : 'OFF'}
    </div>
  </>
}

const App = () => {
  return <>
    <ToggleButton />
  </>
}


createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
***********************************************************************************************************************************************************
								Dropdown with ARIA Roles,keyBoard Navigation
********************************************************************************************************************************************************

ARIA Properties used in this example
aria-haspopup="listbox"
    Which is used to indicate that an element can trigger a popup and also specifies the type of popups - like menus,dialog,listbox
This helps screen readers and other assistive technologies understand what kind of interaction to expect.

<div aria-haspopup="listbox">
What it does:
 Tells users that interacting with element will open a popup
  Screen reader accounce the type of popup like model,dialog,menu,grid | true | false

aria-expanded=true | false

 It describes whether an element like menu, accrodin,dropdown is currently expanded or collapsed---- it is way of making interactive content accessible to the screen readers

<div   aria-expanded={true|false}>

aria-controls:
.....................
 This is link property/attribute
 It is used to link a control element like button or tab to the element it affects

<button aria-controls="panel">Show Info</button>

<div id="panel" hidden>
      <p>xxxx </p>
</div>

import { StrictMode, useState, useRef, useEffect } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'


const options = ['Apple', 'Banana', 'Cherry', 'Mango', 'Orange']

function DropDown() {

    const [isOpen, setIsOpen] = useState(false)
    const [selectedOption, setSelectedOption] = useState(null)
    const [highlightedIndex, setHighlightedIndex] = useState(0);
    //this is variable is used to make focus
    const containerRef = useRef(null);

    const handleSelect = (index) => {
        setSelectedOption(options[index])
        setIsOpen(false)
    }

    useEffect(() => {
        const current = containerRef.current;
        if (current) current.focus();
    }, [isOpen]);

    const handleKeyDown = (e) => {
        if (!isOpen) {
            if (e.key === 'Enter' || e.key === ' ' || e.key === 'ArrowDown') {
                e.preventDefault();
                setIsOpen(true);
            }
            return;
        }

        if (isOpen) {
            switch (e.key) {
                case 'ArrowDown':
                    e.preventDefault();
                    setHighlightedIndex((prev) => (prev + 1) % options.length);
                    break;
                case 'ArrowUp':
                    e.preventDefault();
                    setHighlightedIndex((prev) => (prev - 1 + options.length) % options.length);
                    break;
                case 'Enter':
                case ' ':
                    e.preventDefault();
                    handleSelect(highlightedIndex);
                    break;
                case 'Escape':
                    e.preventDefault();
                    setIsOpen(false);
                    break;
                default:
                    break;
            }
        }
    };

    return  <div role="banner" tabIndex={0}>
            <h1>Header</h1>
        <div
            ref={containerRef}
            tabIndex={0}
            role
            onKeyDown={handleKeyDown}
            style={{ width: '220px', outline: 'none' }}
        >

            <div
                role="button"
                aria-haspopup="listbox"
                aria-expanded={isOpen}
                aria-controls="fruits-listbox"
                style={{
                    marginTop: '50px',
                    padding: '10px',
                    border: '1px solid #cccc',
                    borderRadius: '4px',
                    backgroundColor: '#a5baa5ff',
                    cursor: 'pointer'
                }}
            >
                {selectedOption ? selectedOption : 'Select a fruit'}
            </div>
            {isOpen && (
                <ul id="fruits-listbox"
                    role="listbox"
                    style={{
                        listStyle: 'none',
                        margin: 0,
                        padding: 0,
                        border: '1px soid #ccc',
                        maxHeight: '150px',
                        overFlowY: 'auto',
                        background: 'White'
                    }}>
                    {options.map((option, index) => {
                        return <li
                            key={index}
                            role='option'
                            aria-selected={selectedOption === option}
                            id={`option-${index}`}
                            onClick={(e) => {
                                handleSelect(index)
                            }}
                            style={{
                                padding: '8px',
                                backgroundColor: highlightedIndex === index ? '#007bff' : '',
                                color: highlightedIndex === index ? 'white' : 'black',
                                cursor: 'pointer'
                            }}
                        >
                            {option}
                        </li>
                    })}
                </ul>
            )}
        </div>
    </div>
}

const App = () => {
    return <>
        <DropDown />
    </>
}


createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
************************************************************************************************************************************************************
										 POUR AND React (HTML)
								 Perceivable, Operable, Understandable, Robust.
***********************************************************************************************************************************************************
Perceivable:
**************
	The Perceivable principle in the Web Content Accessibility Guidelines (WCAG) ensures that users" can access and understand content through their available senses"‚Äîespecially sight and hearing.
It‚Äôs the first of the four POUR principles: Perceivable, Operable, Understandable, Robust.

Information and user interface components must be presentable to users in ways they can perceive.

üì∑ Guideline 1.1 ‚Äì Text Alternatives (Level A)
- Provide alt text for images so screen readers can describe them.
- Use captions for audio and video content.
- Offer text descriptions for complex visuals like charts or infographics.

Guideline 1.2 Time-Based Media (Level A, AA, AAA)
	Provide alternatives for multimedia:
	       Captions (A) for prerecorded audio/video.
	       Audio Descriptions (AA) for important visual content in videos.
	       Sign Language Interpretation (AAA) for complex media.

 Guideline 1.3 ‚Äì Adaptable (Level A, AA)
Ensure content can be presented in different ways without losing meaning:
	-Semantic HTML (proper headings, lists, landmarks).
	-Correct reading order (CSS should not disrupt logical flow).
	-Avoid reliance on sensory characteristics (e.g., "Click the green button" should not be the only instruction).

 Guideline 1.4 ‚Äì Distinguishable (Level A, AA, AAA)
Make it easier for users to see and hear content:
	Color contrast (AA) ‚Äì at least 4.5:1 for normal text.
	Text resizing (AA) ‚Äì text should be readable when zoomed to 200%.
	No audio autoplay (A) ‚Äì avoid unexpected sounds.
	Text spacing (AA) ‚Äì users should adjust spacing without loss of content.

Why is Perceivable Important?
	-Helps users with visual, auditory, or cognitive disabilities.
	-Ensures content works with screen readers, braille displays, and captions.
	-Improves usability for all users, including those in bright sunlight or noisy environments.
***********************************************************************************************************************************************************
									Guideline 1.1 ‚Äì Text Alternatives (Level A)
***********************************************************************************************************************************************************

Goal: All non-text content (images, icons, charts, etc.) must have a text alternative.

Key Requirements:
Images: Use alt text (or ARIA labels if alt isn‚Äôt possible)
<img src="chart.png" alt="Bar chart showing 2023 sales growth: 15% increase">  

Decorative Images: Use empty alt (alt="") so screen readers skip them.
Complex Graphics (charts, diagrams): Provide a detailed description nearby or link to a full explanation.

Common Failures:
‚ùå Missing alt attributes.
‚ùå Using placeholder text like alt="image" or alt="spacer".
‚ùå Relying on filenames (e.g., alt="IMG_0234.jpg").

Types of Text Alternatives:


A. Short Descriptions (alt Text)
...........................................................
Used for simple images where a brief description suffices.

Example:

html
<img src="search-icon.png" alt="Search">  

Best Practices:

Be concise (usually under 150 characters).
Avoid "image of" or "picture of" (screen readers announce it as an image).
If the image is purely decorative, use alt="" (empty alt).

B. Long Descriptions (aria-describedby or Adjacent Text)
Used for complex images (charts, diagrams, infographics).

Example:

html
<img src="sales-chart.png" alt="2023 Quarterly Sales Growth" aria-describedby="chart-desc">  
<p id="chart-desc">Bar chart showing Q1: $10K, Q2: $15K, Q3: $20K, Q4: $25K.</p>  

Alternative: Link to a separate page with a full description.

C. Functional Images (Buttons, Links, Logos)
Logo linking to homepage:

html
<a href="/">  
  <img src="logo.png" alt="Go to Homepage">  
</a>  
Icon buttons:

html
<button>  
  <img src="print-icon.png" alt="Print this page">  
</button>

D. Decorative & Redundant Images
Decorative (e.g., background flourishes):

html
<img src="divider.png" alt="">  


E.Redundant (if text already explains it):
html
<button>  
  <img src="search-icon.png" alt="">  
  Search  
</button>  

3. Special Cases & Advanced Techniques
A. CAPTCHA Alternatives
Must provide audio CAPTCHA for users who can‚Äôt see images.
Better: Use non-visual verification methods (e.g., logic questions).

B. SVG & Icon Fonts
SVG with title and desc:

html
<svg role="img" aria-labelledby="svg-title svg-desc">  
  <title id="svg-title">Warning</title>  
  <desc id="svg-desc">A triangle with an exclamation mark inside.</desc>  
  <!-- SVG path data here -->  
</svg>  


Icon fonts (Font Awesome):
html
<i class="fa fa-trash" aria-hidden="true"></i>  
<span class="sr-only">Delete</span>  

C. CSS Background Images
	If the image conveys meaning, provide a hidden text alternative:

html
<div class="warning-icon" aria-label="Warning"></div>  
If purely decorative, no action is needed.


. Common Mistakes & Failures
‚ùå Missing alt entirely (screen readers may read the filename).
‚ùå Vague alt text (e.g., alt="image", alt="chart").
‚ùå Redundant alt text (e.g., alt="Company Logo [Company Name]" when the logo already has adjacent text).
‚ùå Using alt for decorative images (should be alt="").
‚ùå Embedding text in images (e.g., infographics without a text version).

 Real-World Examples
‚úÖ Good Examples:
Logo:

html
<img src="logo.png" alt="Acme Corporation">  
Infographic:

html
<img src="workflow.png" alt="Project workflow: 1. Plan 2. Design 3. Develop 4. Test">  
Button with Icon:

html
<button>  
  <img src="download-icon.png" alt=""> Download Report  
</button> 

‚ùå Bad Examples:

Missing alt:

html
<img src="profile-pic.jpg"> <!-- Screen reader reads file name -->  

Redundant:

html
<img src="logo.png" alt="Logo of ABC Company"> <!-- If "ABC Company" is already visible next to it -->  
Overly verbose:

html
<img src="cat.jpg" alt="A small, fluffy gray cat with green eyes sitting on a windowsill in sunlight, looking curiously at the camera.">  
<!-- Better: "Gray cat on windowsill" -->  

 Key Takeaways
‚úî Every image must have an alt attribute (even if empty for decorative images).
‚úî Keep alt text concise but meaningful (describe function, not just appearance).
‚úî For complex images, provide a long description (via aria-describedby or a link).
‚úî Test with screen readers & automated tools to ensure compliance.

Task:
	Each Rule must be simulated by writing react /angular/ plain html

Sample:
3. Decorative Images
‚ùå Bad (Unnecessary alt Text)
jsx
// Bad: Decorative image with redundant alt
function BadDecorative() {
  return <img src="/divider.png" alt="Decorative divider" />;
}
Issue:
Screen readers unnecessarily announce it.

‚úÖ Good (Empty alt)
jsx
// Good: Empty alt for decorative images
function GoodDecorative() {
  return <img src="/divider.png" alt="" />;
}
Why it‚Äôs good:

alt="" tells screen readers to skip it.

***********************************************************************************************************************************************************
								Guideline 1.2 Time-Based Media (Level A, AA, AAA)
									        (videos ,Audio)
***********************************************************************************************************************************************************

Objective:
    Ensure pre-recorded audio/video is accessible to people who are deaf, hard of hearing, blind, or have cognitive disabilities.

1. Understanding WCAG Levels (A, AA, AAA)

Level	Requirement											Who Benefits?

A		Captions for pre-recorded audio/video						Deaf/HoH users
AA		Audio descriptions (if visuals aren‚Äôt explained in audio)		Blind users
AAA		Extended audio descriptions + Sign language interpretation	Highest accessibility

2. Captions (Level A) ‚Äì Core Requirements
Definition:

Captions = Text version of speech + important sounds (e.g., [door creaks], [music playing]).

Must be synchronized with the media.

Types of Captions:
Closed Captions (CC)
	Can be toggled on/off (e.g., YouTube CC button).
Open Captions
	Burned into the video (always visible).

What Must Be Captioned?
‚úî All speech (dialogue, narration).
‚úî Key sound effects (e.g., [glass shattering], [phone ringing]).
‚úî Speaker identification (e.g., [Narrator]:, [John]).
‚úî Music cues (e.g., [suspenseful music]).


‚ùå Common Failures (Bad Captions)
Auto-generated captions with errors (e.g., "brain" instead of "brand").
Missing sound descriptions (e.g., a gunshot isn‚Äôt captioned).
Poor synchronization (text lags behind audio).

‚úÖ Good Captioning Examples
<video controls>
  <source src="tutorial.mp4" type="video/mp4">
  <track 
    src="captions.vtt" 
    kind="captions" 
    srclang="en" 
    label="English" 
    default
  >
</video>
captions.vtt Example (WebVTT Format)
vtt
WEBVTT

00:00:05.000 --> 00:00:08.000
[Narrator]: Welcome to our tutorial.

00:00:09.000 --> 00:00:12.000
[Computer beeps] Press the red button.

4. Sign Language Interpretation (Level AAA)
Definition:
	A sign language (e.g., ASL) video alongside the main content for Deaf users who rely on signing.

Implementation Options:
Picture-in-Picture (PiP) Sign Language

html
<video controls>
  <source src="main-video.mp4" type="video/mp4">
  <source src="asl-interpreter.mp4" type="video/mp4">
</video>
Separate Video Link

html
<a href="asl-version.html">Watch ASL Interpretation</a>

5. Transcripts (Fallback for All Levels)
Definition:

Full text version of audio/video (includes speech, sounds, and visual descriptions).

‚úÖ Good Transcript Example

# Tutorial: How to Reset Your Password

**[00:00:05] Narrator:** "Welcome to our tutorial."  
**[00:00:09] [Computer beeps]**  
**[00:00:10] On-screen:** A "RESET" button appears.  
**[00:00:12] Narrator:** "Press the red button." 

. Key Takeaways

Requirement		   	Level		Implementation

Captions				 A		      WebVTT (<track kind="captions">)

Audio Descriptions 	AA			WebVTT  (<track kind="descriptions">)

Sign Language		AAA			PiP video or separate link

Transcript		        A+			Plain text with full context


Sample Code:

import React from 'react';

function VideoWithCaptions() {
  return (
    <div>
      <h2>Accessible Video with Captions</h2>
      <video controls width="600">
        <source src="/tutorial.mp4" type="video/mp4" />
        {/* WebVTT Captions Track */}
        <track
          src="/captions.vtt"
          kind="captions"
          srcLang="en"
          label="English"
          default
        />
        {/* Fallback for browsers that don't support video */}
        <p>Your browser doesn‚Äôt support HTML5 video. 
          <a href="/tutorial.mp4">Download the video</a> instead.
        </p>
      </video>
    </div>
  );
}

export default VideoWithCaptions;

Example captions.vtt File (Place in public/ folder):

vtt
WEBVTT

00:00:00.000 --> 00:00:03.000
[Narrator]: Welcome to our accessibility tutorial.

00:00:04.000 --> 00:00:07.000
[Sound Effect]: [Door creaks]

00:00:08.000 --> 00:00:10.000
[Speaker 1]: Press the "Start" button to begin.

*********************************************************************************************************************************************************
									1.3.Adaptable (Level A, AA) requirements
********************************************************************************************************************************************************



1. Semantic HTML
Use proper heading hierarchy (<h1> to <h6>) for document structure.
Mark up lists (<ul>, <ol>, <dl>) and tables (<table>, <th>, <caption>) correctly.
Include ARIA landmarks (<nav>, <main>, <aside>, <footer>) for navigation and structure.

2. Correct Reading Order

Ensure the DOM order matches the logical reading sequence.
Avoid using CSS (e.g., float, absolute positioning) to visually reorder content in a way that disrupts the underlying HTML flow.
Test with keyboard navigation (Tab order) and screen readers to verify logical flow.

3. Avoid Sensory Characteristics
Do not rely solely on color, shape, size, or sound for instructions.

‚ùå "Click the green button" ‚Üí ‚úÖ "Click the green 'Submit' button" (include text/label).

‚ùå "See the circled item" ‚Üí ‚úÖ "See the circled 'Important Notice' below."

Ensure icons have text alternatives (e.g., aria-label or visible text).
************************************************************************************************************************************************************							 Guideline 1.4 ‚Äì Distinguishable (Level A, AA, AAA)
************************************************************************************************************************************************************
Make it easier for users to see and hear content:
	Color contrast (AA) ‚Äì at least 4.5:1 for normal text.
	Text resizing (AA) ‚Äì text should be readable when zoomed to 200%.
	No audio auto play (A) ‚Äì avoid unexpected sounds.
	Text spacing (AA) ‚Äì users should adjust spacing without loss of content.

Distinguishable Requirements by Level:

Level A (Minimum Accessibility)
	Color is Not the Only Visual Means (1.4.1)
	Information conveyed with color must also be available through text or other visual cues (e.g., underlined links, icons, patterns).

Audio Control (1.4.2)

If audio plays automatically for more than 3 seconds, users must have a way to pause or stop it.
Level AA (Strong Accessibility ‚Äì Common Standard)


Contrast Minimum (1.4.3)

Text must have a contrast ratio of at least 4.5:1 (normal text) or 3:1 (large text, 18pt+ or bold 14pt+).
Exception: Logos and decorative text have no contrast requirement.

Text Resize (1.4.4)

Text must be resizable up to 200% without loss of content or functionality.

Images of Text (1.4.5)
Avoid using images of text unless necessary (e.g., logos). Prefer CSS-styled text for better scalability and accessibility.

Level AAA (Highest Accessibility)
Contrast Enhanced (1.4.6)
Text must have a contrast ratio of at least 7:1 (normal text) or 4.5:1 (large text).

Low or No Background Audio (1.4.7)
 Pre-recorded audio should have minimal or no background noise, or a way to turn it off.

Visual Presentation (1.4.8)

Users should be able to customize text (spacing, alignment, width, colors) for readability.
No justified text (prevents "rivers of space" in paragraphs).
Line spacing ‚â• 1.5√ó font size, paragraph spacing ‚â• 2√ó font size.
Images of Text (No Exception) (1.4.9)
Avoid images of text entirely unless essential (e.g., branding).

Key Takeaways:
1.Level A ensures basic distinguishability (no color-only cues, audio control).
2.Level AA (most common compliance target) adds contrast, text resizing, and discourages images of text.
3.Level AAA (highest) requires stronger contrast, customizable text, and stricter audio/image rules.
						Understanding Color Contrast in WCAG (1.4.3 & 1.4.6)

Color contrast ensures that text is readable against its background, particularly for users with low vision, color blindness, or in low-light conditions.

WCAG Color Contrast Requirements:

Normal Text (‚â§18pt / ‚â§14pt bold)	
Large Text (‚â•18pt / ‚â•14pt bold)	Graphical Objects & UI Components

AA (Minimum)	4.5:1	3:1	3:1 (for essential UI elements like buttons, icons)
AAA (Enhanced)	7:1	4.5:1	4.5:1 (for critical interact

Key Rules:

Text vs. Background
Standard text must meet 4.5:1 (AA) or 7:1 (AAA).

Large text (‚â•18pt normal or ‚â•14pt bold) needs 3:1 (AA) or 4.5:1 (AAA).

Non-Text Elements (Icons, Buttons, Graphs)
Interactive components (buttons, form fields) must have ‚â•3:1 (AA) contrast.
Icons and graphs conveying information should also meet contrast standards.

Exceptions:

Logos & decorative text (no contrast requirement).
Disabled/inactive elements (e.g., grayed-out buttons).

https://coolors.co/contrast-checker/112a46-1167c2

4.5: 1 contrast ratio:
.................................
 4.5:1 contrast ratio is a way to measure how readable text is against its background, especially for people with visual impairments. It‚Äôs part of the Web Content Accessibility Guidelines (WCAG), which aim to make digital content more accessible.

Breaking Down the Ratio
- 4.5 represents the relative luminance of the lighter color (usually the text or background).
- 1 represents the relative luminance of the darker color.
So when we say 4.5:1, it means the lighter color is 4.5 times brighter than the darker one. This ratio ensures that standard-sized text is legible for most users, including those with moderate vision loss.

 How It's Calculated
The contrast ratio is calculated using this formula:
(L1 + 0.05) / (L2 + 0.05)

- L1 is the luminance of the lighter color.
- L2 is the luminance of the darker color.
The result gives you a number like 4.5:1, 7:1, etc.

Why It Matters
- 4.5:1 is the minimum required for normal text under WCAG Level AA.
- Larger or bold text can get by with a lower ratio like 3:1.
- For maximum accessibility (Level AAA), the ratio should be 7:1.

eg:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Color Contrast</title>
    <style>
        body {
            font-family: Arial, Helvetica, sans-serif;
            padding: 20px;
        }

        .good-contrast {
            background-color: #ffffff;
            color: #000000;
            padding: 10px;
            margin-bottom: 15px;
        }

        .bad-contrast {
            background-color: #a30a0a;
            color: #000000;
            padding: 10px;
            margin-bottom: 15px;
        }

        .border-test {
            border: 2px solid #eee;
            color: #eee;
            padding: 10px;
            margin-bottom: 15px;
        }
        .link-test {
            background-color: #222;
            color: #00f;
            padding:10px;
            margin-bottom: 15px;
        }
        .large-text {
            background-color: #004488;
            color:#ffffff;
            font-size: 24px;
            padding: 10px;
        }
    </style>
</head>

<body>
    <div role="banner">
        <h1 tabindex="0">Contract Checker</h1>
    </div>
    <main class="good-contrast">
        <p>Good Contrast - (black and White)</p>
        <p>This text passes WCAG AA and Standard AAA</p>
    </main>
    <main class="bad-contrast">
        <p>Bad Contrast - (red and black)</p>
        <p>This text passes WCAG AA and Standard AAA</p>
    </main>

    <section class="border-test">
        <p>Border and Text color- (very Low contrast)</p>
        <p>This text blends into background</p>
    </section>

    <nav class="link-test">
        <a href="#" >Click Here</a>
    </nav>

    <section class="large-text">
        Large Text with
    </section>

</body>

</html>


Descrition 					  Text Size                                  Pass/Fail               Level

Normal Text (dark on light)              16px                                           pass                     AA/AAA

Normal Text (light on light)              16px                                           fail                        fail AA

Large Text (bold 24px)                   High contrast                              pass                     AA/AAA

Large Text (bold 24px)                   Low contrast                              fail                        Fail AA
          

************************************************************************************************************************************************************
											Perceivable Rules Code
************************************************************************************************************************************************************

Code With Error:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Perceivable</title>
</head>
<body>
    <img src="play-button.png">
    <div style="color:gray;background-color:lightgrey;">
        special Offer!
    </div>
    <p>This is test page</p>
    <video controls>
        <source src="demo.mp4" type="vido/mp4">
    </video>
    <input type="text" id="email" placeholder="Enter Email">
    <button>Subscribe</button>
    
</body>
</html>

Errors:

You have list out

Solution:

What are fixes:
**********************************************************************************************************************************************************
											    POUR
									Operable Principles (Able to operate)
**********************************************************************************************************************************************************
The WCAG Operable Principles are part of the Web Content Accessibility Guidelines (WCAG), which ensure that digital content is accessible to all users, including those with disabilities. The Operable principle focuses on making user interface components and navigation functional for everyone, including keyboard-only users and those relying on assistive technologies.

Key Guidelines Under Operable (2.1 - 2.5)

2.1 Keyboard Accessible (Guideline 2.1)
	2.1.1 Keyboard (A) ‚Äì All functionality must be operable via a keyboard.
	2.1.2 No Keyboard Trap (A) ‚Äì Users should not get stuck in keyboard focus traps.
	2.1.4 Character Key Shortcuts (AAA) ‚Äì Avoid single-key shortcuts unless they can be turned off or remapped.

2.2 Enough Time (Guideline 2.2)
	2.2.1 Timing Adjustable (A) ‚Äì Users should be able to adjust or turn off time limits.
	2.2.2 Pause, Stop, Hide (A) ‚Äì Moving, blinking, or auto-updating content should have controls.
	2.2.3 No Timing (AAA) ‚Äì No time limits except for real-time events (e.g., auctions).
	2.2.4 Interruptions (AAA) ‚Äì Users should be able to postpone interruptions.
	2.2.5 Re-authenticating (AAA) ‚Äì Sessions should resume after re-authentication.

2.3 Seizures and Physical Reactions (Guideline 2.3)
	2.3.1 Three Flashes or Below Threshold (A) ‚Äì Avoid flashing content that could trigger seizures (<3 flashes per second).
	2.3.2 Three Flashes (AAA) ‚Äì No content flashes more than 3 times per second.

2.4 Navigable (Guideline 2.4)
	2.4.1 Bypass Blocks (A) ‚Äì Provide "Skip to Content" links to bypass repetitive navigation.
	2.4.2 Page Titled (A) ‚Äì Pages should have descriptive titles.
       2.4.3 Focus Order (A) ‚Äì Logical keyboard navigation order.
       2.4.4 Link Purpose (In Context) (A) ‚Äì Links should make sense out of context.
      2.4.5 Multiple Ways (AA) ‚Äì Offer multiple navigation methods (e.g., search, sitemap).
      2.4.6 Headings and Labels (AA) ‚Äì Clear and descriptive headings/labels.
      2.4.7 Focus Visible (AA) ‚Äì Keyboard focus should be clearly visible.

2.5 Input Modalities (Guideline 2.5)
      2.5.1 Pointer Gestures (A) ‚Äì Avoid complex gestures (e.g., pinch/zoom) as the only input method.
       2.5.2 Pointer Cancellation (A) ‚Äì Ensure pointer actions can be canceled. 
       2.5.3 Label in Name (A) ‚Äì UI labels should match accessible names.
       2.5.4 Motion Actuation (A) ‚Äì Functionality should not rely solely on device motion.
      2.5.5 Target Size (AAA) ‚Äì Touch targets should be at least 44√ó44 CSS pixels.
      2.5.6 Concurrent Input Mechanisms (AAA) ‚Äì Support multiple input methods (e.g., touch + keyboard).

Why Operable Matters
	Ensures keyboard accessibility for motor-impaired users.	
	Prevents seizures caused by flashing content.
	Helps screen reader users navigate efficiently
	Supports users who need extra time to interact.

***********************************************************************************************************************************************************
2.1 Keyboard Accessible (Guideline 2.1)

1. Core Requirements

 **All interactive elements** must work with
	- `Tab` / `Shift+Tab` (navigation)  
	- `Enter` / `Space` (activation)  
	- Arrow keys (menus, sliders)  
2.Focus Indicators must be visible

3.No Keyboard traps

Code Examples for keyboard accessibility

1.Focusable buttons and Links

Recommended: Good: Native buttons and links are keyboard accessible by default
 button,a
 <button>submit</button>
<a href="#about">About</a>

Not Recommened: Bad : Non interactive elements, must not pretend to be button
 <main>
        <div>Submit</div>
    </main>

What if there is use case i want to treat div as custom button
soultion:
 <!-- tabindex: operable role:perceivable -->
    <div tabindex="0" onkeydown="if(event.key==='Enter')" role="button" onclick="submitForm()">Submit</div>

Set tab Index, add onkeydown listener

2.Key Navigation for Dropdown Menus
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <button id="menu-button" aria-expanded="false" aria-haspopup="true">
        Menu
    </button>
    <ul id="menu" role="menu" hidden>
        <li role="menuitem">
            <a href="/item1">Item1</a>
        </li>
        <li role="menuitem">
            <a href="/item2">Item2</a>
        </li>
    </ul>
    <script>
        const button = document.getElementById('menu-button')
        const menu = document.getElementById('menu')
        //add keyboard control - naturally
        button.addEventListener('click', () => {
            const isOpen = menu.hidden
            menu.hidden = !isOpen
            button.setAttribute('aria-expanded', isOpen)
        })
        button.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowDown' && menu.hidden) {
                menu.hidden = false
                button.setAttribute('aria-expanded', 'true')
                menu.querySelector('a').focus()
            }
        })
        menu.addEventListener('keydown', e => {
            if (e.key === 'Escape') {
                menu.hidden = true
                button.focus()
            }
        })
    </script>
</body>

</html>

3.Skip Navigtion Link(ByPass blocks)
    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <style>
            .skip-link {
                position: absolute;
                left: 100px;
            }

            .skip-link:focus {
                position: absolute;
                left: 10px;
                top: 10px;
            }
        </style>
    </head>

    <body>
        <!-- If you are skipping some content -->
        <a href="#maincontent" class="skip-link">
            Skip to main
            <header>
                <h1>Site Header</h1>
            </header>
            <main id="maincontent" tabindex="-1">
                <p>This is main Content</p>
            </main>
    </body>

    </html>

Common Pitfalls and Fixes:
...............................................
1.Missing tabindex for custom controls
     ->Add tabindex=0 to make elements focusable
2.Hidden focus styles
     -Never remove outline without replacement
eg:
	button:focus {
		outline:2px sold blue;
       }
3.Non Interactive elements as buttons
     Use button or use role=button + key board handlers


*****************************************************************************************************************************************************
			
								2.2 Enough Time (Guideline 2.2)
							 (Users must have enough time to read and use content)

2.2.1 Timing Adjustable (A) ‚Äì Users should be able to adjust or turn off time limits.
2.2.2 Pause, Stop, Hide (A) ‚Äì Moving, blinking, or auto-updating content should have controls.
2.2.3 No Timing (AAA) ‚Äì No time limits except for real-time events (e.g., auctions).

 Timing Adjustable Session Timeout:
...............................................................

import { StrictMode, useEffect, useState } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

const SessionTimeout = () => {
    const [timeLeft, setTimeLeft] = useState(30) //2 mins
    const [showWarning, setShowWarning] = useState(false)

    useEffect(() => {
        const timer = setInterval(() => {
            console.log('calling')
            setTimeLeft(prev => {
                if (prev <= 0) {
                    clearInterval(timer)
                    alert("Session Expired")
                    return 0;
                }
                return prev - 1
            });
            if (timeLeft === 30) setShowWarning(true)
        }, 1000)
        //clearn up code
        return () => clearInterval(timer)
    }, [timeLeft])

    return <div aria-live="polite">
        {showWarning && (<div>
            <h1>Session Expires in {Math.floor(timeLeft / 60)}:{timeLeft % 60 < 10 ? '0' : ''}{timeLeft % 60}</h1>
        </div>)}
    </div>
}

const App = () => {
    return <>
        <SessionTimeout />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
			2.2.2 Pause, Stop, Hide (A) ‚Äì Moving, blinking, or auto-updating content should have controls.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

import { StrictMode, useEffect, useState } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

const AccessibleCarousel = () => {
    //slide content
    const slides = ['Slide 1', 'Slide 2', 'Slide 3', 'Slide 4', 'Slide 5']
    const [currentIndex, setCurrentIndex] = useState(0)
    const [isPlaying, setIsPlaying] = useState(true)

    useEffect(() => {
        if (!isPlaying) return;
        const interval = setInterval(() => {
            setCurrentIndex(prev => (prev + 1) % slides.length)
        }, 1000)
        return () => clearInterval(interval)
    }, [isPlaying, slides.length])

    return <div aria-live="off">
        <div style={{backgroundColor:'CaptionText', height:200,color:'whitesmoke' ,textAlign:'center'}}>{slides[currentIndex]}</div>
        <button onClick={() => {
            setIsPlaying(!isPlaying)
        }}>{isPlaying ? 'Pause' : 'Play'}</button>
    </div>
}

const App = () => {
    return <>
        <AccessibleCarousel />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										POUR - Understandable
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

The **"Understandable"** principle in **WCAG's POUR framework** ensures that digital content is clear, predictable, and easy to comprehend for all users, including those with cognitive, learning, or language disabilities.  

 **Key Requirements for Understandable Content:**  

1. **Readable & Plain Language**  
   - Use simple, concise language.  
   - Avoid jargon, complex sentences, or idioms unless explained.  
   - Define abbreviations (e.g., "WCAG (Web Content Accessibility Guidelines)"). 

2. **Predictable Navigation & Behavior**  
   - Buttons, links, and menus should work as expected.  
   - Avoid unexpected pop-ups or automatic redirects.  
   - Keep navigation consistent across pages.  
 
3. **Clear Input Assistance (Forms & Controls)**  
   - Provide helpful **labels, instructions, and error messages**.  
   - Example: Instead of "Error: Invalid input," say "Please enter a valid email (e.g., name@example.com)."  
   - Allow users to review & correct mistakes before submission.  

4. **Avoid Time Pressure (When Possible)**  
   - Let users disable, adjust, or extend time limits (e.g., for forms or quizzes).  
   - Avoid auto-refreshing or auto-updating content unless the user controls it.  

5. **Consistent Design & Layout**  
   - Use familiar icons (e.g., a magnifying glass for search).  
   - Keep interactive elements (buttons, links) visually distinct.  

### **Why "Understandable" Matters**  
- Helps users with **cognitive disabilities** (e.g., dyslexia, ADHD).  
- Benefits **non-native speakers** and those with low literacy.  
- Improves usability for **everyone** by reducing confusion.  

### **Examples of Understandable Design**  
‚úÖ **Good:**  
- A form with clear labels like "First Name" (instead of just "Name").  
- A "Submit" button that confirms success ("Thank you! Your message was sent.").  

‚ùå **Bad:**  
- A button that says "Click here" without context.  
- A countdown forcing users to rush (without an option to extend time).  


 **How to Test for "Understandable" Content**  
1. **Readability Check:** Use tools like Hemingway Editor to simplify text.  
2. **User Testing:** Ask people with different abilities to navigate your site.  
3. **Keyboard-Only Test:** Ensure all functions work without a mouse.  
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										Forms
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

1.Labeling Controls: 

	Use the <label> element, and, in specific cases, other mechanisms (e.g. WAI-ARIA, title attribute etc.), to identify each form control.

Provide labels to identify all form controls, including text fields, checkboxes, radio buttons, and drop-down menus. In most cases, this is done by using the <label> element.

Labels need to describe the purpose of the form control.

A label and a form control should be associated with each other either implicitly or explicitly.

Web browsers provide the label as a larger clickable area, for example, to select or activate the control.

It also ensures that assistive technology can refer to the correct label when presenting a form control.

Associating labels explicitly
Whenever possible, use the label element to associate text with form elements explicitly. The for attribute of the label must exactly match the id of the form control.

Example
<label for="firstname">First name:</label>
<input type="text" name="firstname" id="firstname"><br>

<input type="checkbox" name="subscribe" id="subscribe">
<label for="subscribe">Subscribe to newsletter</label>

Hiding label text:
...........................
A label for a form control helps everyone better understand its purpose.
In some cases, the purpose may be clear enough from the context when the content is rendered visually.
The label can be hidden visually, though it still needs to be provided within the code to support other forms of presentation and interaction, such as for screen reader and speech input users.

In the example below, the search field is positioned directly beside the search button. The purpose of the text input field is evident from the context in most situations.

Approach 1:

Hiding the label element

In this approach, the <label> element is provided to identify a form control within the code, but it is visually hidden to avoid redundancy for users who can derive the purpose from the visual cues.

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .visuallyhidden {
            border: 0;
            clip: rect(0 0 0 0);
            height: 1px;
            margin: -1px;
            overflow: hidden;
            padding: 0;
            position: absolute;
            width: 1px;
        }
    </style>
</head>

<body>
    <label for="search" class="visuallyhidden">Search: </label>
    <input type="text" name="search" id="search">
    <button type="submit">Search</button>
</body>

</html>

Approach 2: Using aria-label:
................................................
	The aria-label attribute can also be used to identify form controls. 
        This approach is well supported by screen readers and other assistive technology, but, unlike the title attribute (see below), the                         information is not conveyed to visual users. 
       The approach should therefore only be used when the label of the control is clear from the surrounding content, like the button in the example below.
  <input type="text" name="search" aria-label="Search">
  <button type="submit">Search</button>

Using aria-labelledby

	The aria-labelledby attribute can also be used to identify form controls. 
	This approach is well supported by screen readers and other assistive technology, but, unlike the title attribute (see below), the information is not conveyed to visual users. The approach should therefore only be used when the label of the control is clear from the surrounding content, like the button in the example below.

The id of the element containing the label text is used as the value of the aria-labelledby attribute.

<input type="text" name="search" aria-labelledby="searchbutton">
<button id="searchbutton" type="submit">Search</button>

Approach 4:
Using the title attribute
	
	The title attribute can also be used to identify form controls. This approach is generally less reliable and not recommended because some screen readers and assistive technologies do not interpret the title attribute as a replacement for the label element, possibly because the title attribute is often used to provide non-essential information. The information of the title attribute is shown to visual users as a tool tip when hovering over the form field with the mouse.

<input title="Search" type="text" name="search">
<button type="submit">Search</button>

Note on hiding elements

Screen readers and other assistive technology, just as web browsers, hide elements from their users when they are styled using display: none; and visibility: hidden;.

The common approach used to hide information visually but keep them available to screen reader and other assistive technology users is to use CSS that will keep the information technically visible but practically hidden. For example, presenting the label in a 1-by-1 pixel area, as demonstrated with the CSS class visuallyhidden 

eg:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .visuallyhidden {
            border: 0;
            clip: rect(0 0 0 0);
            height: 1px;
            margin: -1px;
            overflow: hidden;
            padding: 0;
            position: absolute;
            width: 1px;
        }
    </style>
</head>

<body>
    <label for="search" class="visuallyhidden">Search: </label>
    <input type="text" name="search" id="search">
    <button type="submit">Search</button>

    <input type="text" name="search1" aria-label="Search">
    <button type="submit">SearchFiles</button>

    <input type="text" name="search" aria-labelledby="searchbutton">
    <button id="searchbutton" type="submit">SearchVideos</button>

    <input title="SearchImages" type="text" name="search">
    <button type="submit">SearchImages</button>
</body>

</html>
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Labeling buttons:
The label of a <button> element is set inside the element and can include markup. This allows more advanced accessibility hints to be included, like marking up language change. When using the <input> element to create buttons, the label is set in the value attribute of the element.

Example
<button type="submit">Submit</button>
<button type="button">Cancel</button>


If the image button (<input type="image">) is used, the label is set in the alt attribute, for example: <input type="image" src="searchbutton.png" alt="Search">

See Functional Images for more information on how to describe images in buttons.

eg:
   <button type="submit">Submit</button>
    <button type="button">Cancel</button>
    <input type="image"  src="play-button.png" alt="play">

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
************************************************************************************************************************************************************
											Grouping Controls
***********************************************************************************************************************************************************
Overview
   Grouping related form controls makes forms more understandable for all users, as related controls are easier to identify. It also makes it easier for people to focus on smaller and more manageable groups rather than try to grasp the entire form at once.

Associating related controls with fieldset
	Radio buttons
	Checkboxes
	Related fields
Associating related controls with WAI-ARIA

Grouping items in select elements

Approach-1:Associating related controls with fieldset

The <fieldset> element provides a container for related form controls, and the <legend> element acts as a heading to identify the group.

The legend for a group of controls can also highlight common attributes of all controls, for example, to advise that all fields in the group are required.

Radio buttons & Checkboxes:
	In the example below, there are three radio buttons that allow the user to choose an output format. Radio button groups should always be grouped using <fieldset>.

<form>
        <fieldset>
            <legend>User Form</legend>
            <section>
                <input type="radio" name="format" id="txt" value="txt" checked>
                <label for="txt">Text file</label>
            </section>
            <section>
                <input type="radio" name="format" id="csv" value="csv">
                <label for="csv">CSV file</label>
            </section>
        </fieldset>
        <fieldset>
            <legend>I want to receive</legend>
            <div>
                <input type="checkbox" name="newsletter" id="check_1">
                <label for="check_1">The weekly newsletter</label>
            </div>
        </fieldset>
    </form>


Related fields
This example shows form fields to enter shipping and billing addresses. As the labels in both groups have the same text, the fieldset element also helps to distinguish the form fields by their groups. In case the <legend> is not read by screen readers (see note below), labels for the first form control in each group should include the group‚Äôs name. This name can be hidden visually.


<fieldset>
	<legend>Shipping Address:</legend>
	<div>
		<label for="shipping_name">
      <span class="visuallyhidden">Shipping </span>Name:
    </label><br>
		<input type="text" name="shipping_name" id="shipping_name">
	</div>
  <div>
    <label for="shipping_street">Street:</label><br>
    <input type="text" name="shipping_street" id="shipping_street">
  </div>
</fieldset>
<fieldset>
	<legend>Billing Address:</legend>
	<div>
		<label for="billing_name">
      <span class="visuallyhidden">Billing </span>Name:
    </label><br>
		<input type="text" name="billing_name" id="billing_name">
	</div>
  <div>
    <label for="billing_street">Street:</label><br>
    <input type="text" name="billing_street" id="billing_street">
  </div>
</fieldset>

Associating related controls with WAI-ARIA
WAI-ARIA provides a grouping role that functions similarly to fieldset and legend. In this example, the div element has role=group to indicate that the contained elements are members of a group and the aria-labelledby attribute references the id for text that will serve as the label for the group.

This technique provides additional styling possibilities.

<div role="group" aria-labelledby="shipping_head">
	<div id="shipping_head">Shipping Address:</div>
	<div>
		<label for="shipping_name">
      <span class="visuallyhidden">Shipping </span>Name:
    </label><br>
		<input type="text" name="shipping_name" id="shipping_name">
	</div>
</div>
<div role="group" aria-labelledby="billing_head">
	<div id="billing_head">Billing Address:</div>
	<div>
		<label for="billing_name">
      <span class="visuallyhidden">Billing </span>Name:
    </label><br>
		<input type="text" name="billing_name" id="billing_name">
	</div>
</div>
******************

Grouping items in select elements:
...........................................................

For select elements with groups of options, the optgroup element can be used to indicate such groups. The label attribute of the optgroup element is used to provide a label for the group. This is especially useful for lists with many related options. In the example below, users can choose from lectures in one of three courses.

       <select>
            <optgroup label="8.01 Physics I: Classical Mechanics">
                <option value="8.01.1">Lecture 01: Powers of Ten</option>
                <option value="8.01.2">Lecture 02: 1D Kinematics</option>
                <option value="8.01.3">Lecture 03: Vectors</option>
            </optgroup>
            <optgroup label="8.02 Physics II: Electricity and Magnestism">
                <option value="8.02.1">Lecture 01: What holds our world together?</option>
            </optgroup>
        </select>

***********************************************************************************************************************************************************
										Form Instructions

Overall instructions
	Where relevant, provide overall instructions that apply to the entire form. For example, indicate any required and optional input, allowed data formats, and timing limitations. Provide such instructions before the <form> element to ensure that it is read aloud by screen readers before they switch to ‚ÄúForms Mode‚Äù.

In the example below, form instructions indicate how required fields are marked, the expected format for the main data fields, and where to find additional help for each input.

All fields marked ‚Äúrequired‚Äù must be completed.
Dates should all be typed in the format dd/mm/yyyy, (as in 21/07/2013).
Passwords must contain at least 8 letters and/or numbers.
Extra help can be found immediately after each field.

Providing instructions within labels
For simple use cases, providing instructions within labels may be sufficient. This approach is reliable across different web browsers and assistive technologies, although it may require some additional thought to support some styling needs.

In the example below, the required format for the ‚ÄúExpiration Date‚Äù is indicated by ‚ÄúMM/YYYY‚Äù within the same label:

<label for="expire">Expiration date (MM/YYYY): </label>
<input type="text" name="expire" id="expire">


Providing instructions outside labels
Providing instructions outside of labels allows more flexible positioning and design, but sometimes it can be missed. It is also not supported by some web browsers (typically older versions) and assistive technologies that don‚Äôt implement WAI-ARIA.

Using aria-labelledby

<label id="expLabel" for="expire">Expiration date:</label>
<span>
	<input type="text" name="expire" id="expire" aria-labelledby="expLabel expDesc">
	<span id="expDesc">MM/YYYY</span>
</span>

Using aria-describedby
Another approach to associate additional instructions with a form field is to use aria-describedby. Information referenced by this attribute is made available to the users after the label and other information is announced.

<label id="expLabel" for="expire">Expiration date:</label>
<span>
	<input type="text" name="expire" id="expire" aria-labelledby="expLabel" aria-describedby="expDesc">
	<span id="expDesc">MM/YYYY</span>
</span>

Placeholder text

    Placeholder text provides instructions or an example of the required data format inside form fields that have not yet been edited by the user. Placeholder text is usually displayed with lower color contrast than text provided by users, and it disappears from form fields when users start entering text
<div>
	<label for="search">Search:</label> <input type="text" name="search" id="search" placeholder="e.g. Apple Pie">
</div>
<div>
	<label for="email">Email: </label> <input type="text" name="email" id="email" placeholder="joe@example.com">
</div>
***********************************************************************************************************************************************************
									Validating Input
...........................&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

<label for="name">Name (required): </label>
<input type="text" name="name" id="name" required aria-required="true">

The aria-required attribute informs assistive technologies about required controls so that they are appropriately announced to the users (as opposed to validating the input.

Validating common input:
HTML5 also provides input types for other data, including email, url, number, range, date, or time

<div>
	<label for="email">Email: </label>
	<input type="email" name="email" id="email">
</div>
<div>
	<label for="url">Website: </label>
	<input type="url" name="url" id="url">
</div>
<div>
	<label for="number">Number: </label>
	<input type="number" name="number" id="number" min="0" max="100" step="10" value="0">
</div>
<div>
	<label for="range">Range: </label>
	<input type="range" name="range" id="range" min="0" max="100" step="10" value="0">
</div>
<div>
	<label for="date">Date: </label>
	<input type="date" name="date" id="date">
</div>
<div>
	<label for="time">Time: </label>
	<input type="time" name="time" id="time">
</div>

Understable TakeAways:

### **Key Takeaways**  
‚úÖ **Label everything** (never rely on placeholders).  
‚úÖ **Group related fields** (`<fieldset>` + `<legend>`).  
‚úÖ **Explain errors clearly** (avoid "Invalid input").  
‚úÖ **Test with keyboard/screen readers**.  
**********************************************************************************************************************************************************
										  POUR-Robust (Very Strong)
********************************************************************************************************************************************************
## **Key Requirements for Robust Content**
1. **Valid, Semantic HTML**
   - Use proper HTML5 markup with correct element nesting
   - Example: 
     ```html
     <!-- Good -->
     <button>Submit</button>
     
     <!-- Bad (non-semantic) -->
     <div onclick="submitForm()">Submit</div>

2. **Compatibility with Assistive Technologies**
   - Ensure all interactive elements work with:
     - Screen readers (NVDA, VoiceOver, JAWS)
     - Keyboard navigation
     - Voice control software (Dragon NaturallySpeaking)

3. **ARIA for Complex Widgets**
   - Use ARIA (Accessible Rich Internet Applications) attributes when native HTML isn't enough:
     ```html
     <div role="alert" aria-live="assertive">
       Error: Your session has expired.
     </div>
     ```


4. **Progressive Enhancement**
   - Core functionality should work even if:
     - JavaScript fails
     - CSS doesn't load
     - Newer browser features aren't supported


## **Why Robustness Matters**
- Ensures your site works across **different browsers and devices**
- Future-proofs your content as technology evolves
- Critical for users who rely on **older/alternative technologies**

## **Common Robustness Failures & Fixes**
‚ùå **Problem**: Custom widget built entirely with `<div>`s and JavaScript  
‚úÖ **Fix**: Use semantic HTML (`<button>`, `<select>`) enhanced with ARIA

‚ùå **Problem**: Form validation that only shows errors visually  
‚úÖ **Fix**: Include error messages in the DOM with `aria-live`

‚ùå **Problem: Website requires specific browser features  
‚úÖ **Fix**: Provide fallbacks (e.g., `<noscript>` message)

## **Testing for Robustness**
1. **HTML Validation**
   - Use [W3C Validator](https://validator.w3.org/)
2. **Assistive Tech Testing**
   - Try navigating with keyboard only
   - Test with screen readers in different browsers
3. **Feature Detection**
   - Check if core functions work without:
     - JavaScript (`noscript` test)
     - Modern CSS features

## **Example: Robust Modal Dialog**
```html
<!-- Semantic HTML + ARIA -->
<div role="dialog" aria-labelledby="modal-title" aria-modal="true">
  <h2 id="modal-title">Confirm Delete</h2>
  <p>Are you sure you want to delete this item?</p>
  <button>Cancel</button>
  <button>Delete</button>
</div>
```

## **Key Takeaways**
‚úÖ Use **semantic HTML** as your foundation  
‚úÖ Enhance with **ARIA** when needed  
‚úÖ Test with **multiple browsers and assistive tech**  
‚úÖ Ensure **core functionality works without JS/CSS**  
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									POUR Principles in one document
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Buggy code:
<!DOCTYPE html>
<html>
<head>
    <title>Bad Accessibility Examples</title>
    <style>
        body {
            font-family: Comic Sans MS;
            background-color: #F0F0F0;
            color: #F0F0F0; /* Light text on light background */
        }
        .blinking {
            animation: blink 0.5s infinite;
        }
        @keyframes blink {
            0% { opacity: 1; }
            50% { opacity: 0; }
            100% { opacity: 1; }
        }
        .invisible {
            font-size: 1px;
            color: transparent;
        }
    </style>
</head>
<body>
    <!-- Violating Perceivable Principle -->
    <div>
        <h1 style="color: yellow; background-color: white;">Welcome!</h1>
        <img src="chart.png" alt=""> <!-- Missing alt text -->
        <p style="color: #DDD; background-color: #EEE;">Our special offer: 50% off!</p>
        <div class="blinking">LIMITED TIME ONLY!!!</div>
        <audio src="annoying_jingle.mp3" autoplay loop></audio>
    </div>

    <!-- Violating Operable Principle -->
    <div>
        <div style="width: 5000px;"> <!-- Horizontal scrolling required -->
            <button onclick="alert('Button 1 clicked')">Button 1</button>
            <button onclick="alert('Button 2 clicked')">Button 2</button>
            <button onclick="alert('Button 3 clicked')">Button 3</button>
            <button onclick="alert('Button 4 clicked')">Button 4</button>
        </div>
        <div id="trap" tabindex="0" style="outline: none;"> <!-- Keyboard trap -->
            Try to tab away from me!
        </div>
        <script>
            document.getElementById('trap').addEventListener('keydown', function(e) {
                if (e.key === 'Tab') {
                    e.preventDefault();
                    this.focus();
                }
            });
        </script>
        <form>
            <label>Timeout in 10 seconds: <input type="text" name="timeout"></label>
            <script>
                setTimeout(() => {
                    document.forms[0].submit();
                }, 10000);
            </script>
        </form>
    </div>

    <!-- Violating Understandable Principle -->
    <div>
        <p lang="la">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
        <button onclick="window.location.href = '/page2'">Click here</button>
        <form>
            <div>Email:</div>
            <input type="text" name="email">
            <input type="submit" value="Submit">
        </form>
        <div style="position: absolute; left: -9999px;">
            Secret hidden text for SEO purposes
        </div>
    </div>

    <!-- Violating Robust Principle -->
    <div>
        <table>
            <tr><td onclick="alert('Row 1')">Data 1</td></tr>
            <tr><td onclick="alert('Row 2')">Data 2</td></tr>
        </table>
        <custom-element>This won't work in many browsers</custom-element>
        <div role="button" tabindex="0" aria-label=""> <!-- Empty aria-label -->
            Fake button
        </div>
    </div>

    <script>
        // Randomly change content every 5 seconds
        setInterval(() => {
            document.querySelector('h1').textContent = 
                ['Sale!', 'Discount!', 'Offer!'][Math.floor(Math.random()*3)];
        }, 5000);

        // Form that submits on focus loss
        document.querySelector('input[name="email"]').addEventListener('blur', function() {
            this.form.submit();
        });
    </script>
</body>
</html>

This page violates all POUR principles:

Perceivable Violations:

	Low contrast text (light gray on slightly darker gray)
	Missing alt text for images
	Auto-playing audio with no controls
	Blinking content that could trigger seizures
	Color alone used to convey information (yellow text)

Operable Violations:

	Keyboard trap that prevents tabbing away
	Forced horizontal scrolling
	Auto-submitting form with time limit
	No skip links or way to bypass repetitive content

Poor focus indicators (removed outline)

       Understandable Violations:
      Unclear link purpose ("Click here")
      Unexpected form submission on blur
      Randomly changing content
   Content in Latin without language indication
   Hidden text for SEO

Robust Violations:

Invalid custom HTML element
Empty ARIA labels
Table used for layout with click handlers
Non-semantic use of elements
Inconsistent DOM that changes unexpectedly

**********************************************************************************************************************************************************
POUR : Valide Code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WCAG POUR Principles</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
            color: #333;
        }
        h1 {
            color: #005a9c;
            text-align: center;
        }
        h2 {
            color: #005a9c;
            border-bottom: 2px solid #005a9c;
            padding-bottom: 5px;
            margin-top: 30px;
        }
        .principle {
            background-color: #f5f5f5;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .guideline {
            background-color: #e9f2f9;
            padding: 10px;
            margin: 10px 0;
            border-left: 4px solid #005a9c;
        }
        .success-criterion {
            background-color: #fff;
            padding: 8px;
            margin: 8px 0;
            border-left: 2px solid #4a90d9;
        }
        .success-criterion strong {
            color: #005a9c;
        }
    </style>
</head>
<body>
    <h1>WCAG POUR Principles</h1>
    <p>The Web Content Accessibility Guidelines (WCAG) are organized around four principles known by the acronym POUR: Perceivable, Operable, Understandable, and Robust.</p>

    <div class="principle">
        <h2>1. Perceivable</h2>
        <p>Information and user interface components must be presentable to users in ways they can perceive.</p>
        
        <div class="guideline">
            <h3>1.1 Text Alternatives</h3>
            <p>Provide text alternatives for any non-text content.</p>
            <div class="success-criterion">
                <strong>1.1.1 Non-text Content (Level A):</strong> All non-text content has a text alternative.
            </div>
        </div>
        
        <div class="guideline">
            <h3>1.2 Time-based Media</h3>
            <p>Provide alternatives for time-based media.</p>
            <div class="success-criterion">
                <strong>1.2.1 Audio-only and Video-only (Prerecorded) (Level A):</strong> Alternatives provided.
            </div>
            <div class="success-criterion">
                <strong>1.2.2 Captions (Prerecorded) (Level A):</strong> Captions provided for audio.
            </div>
            <div class="success-criterion">
                <strong>1.2.3 Audio Description or Media Alternative (Level A):</strong> Description provided.
            </div>
            <div class="success-criterion">
                <strong>1.2.4 Captions (Live) (Level AA):</strong> Live captions provided.
            </div>
            <div class="success-criterion">
                <strong>1.2.5 Audio Description (Prerecorded) (Level AA):</strong> Extended descriptions provided.
            </div>
        </div>
        
        <div class="guideline">
            <h3>1.3 Adaptable</h3>
            <p>Create content that can be presented in different ways without losing information.</p>
            <div class="success-criterion">
                <strong>1.3.1 Info and Relationships (Level A):</strong> Semantic structure preserved.
            </div>
            <div class="success-criterion">
                <strong>1.3.2 Meaningful Sequence (Level A):</strong> Content order makes sense.
            </div>
            <div class="success-criterion">
                <strong>1.3.3 Sensory Characteristics (Level A):</strong> Don't rely solely on sensory characteristics.
            </div>
        </div>
        
        <div class="guideline">
            <h3>1.4 Distinguishable</h3>
            <p>Make it easier for users to see and hear content.</p>
            <div class="success-criterion">
                <strong>1.4.1 Use of Color (Level A):</strong> Color not used as sole visual means.
            </div>
            <div class="success-criterion">
                <strong>1.4.2 Audio Control (Level A):</strong> Provide control for auto-playing audio.
            </div>
            <div class="success-criterion">
                <strong>1.4.3 Contrast (Minimum) (Level AA):</strong> 4.5:1 contrast ratio.
            </div>
            <div class="success-criterion">
                <strong>1.4.4 Resize Text (Level AA):</strong> Text resizable without loss of functionality.
            </div>
            <div class="success-criterion">
                <strong>1.4.5 Images of Text (Level AA):</strong> Prefer actual text over images of text.
            </div>
        </div>
    </div>

    <div class="principle">
        <h2>2. Operable</h2>
        <p>User interface components and navigation must be operable.</p>
        
        <div class="guideline">
            <h3>2.1 Keyboard Accessible</h3>
            <p>Make all functionality available from a keyboard.</p>
            <div class="success-criterion">
                <strong>2.1.1 Keyboard (Level A):</strong> All functionality operable via keyboard.
            </div>
            <div class="success-criterion">
                <strong>2.1.2 No Keyboard Trap (Level A):</strong> Keyboard focus never trapped.
            </div>
        </div>
        
        <div class="guideline">
            <h3>2.2 Enough Time</h3>
            <p>Provide users enough time to read and use content.</p>
            <div class="success-criterion">
                <strong>2.2.1 Timing Adjustable (Level A):</strong> Adjustable time limits.
            </div>
            <div class="success-criterion">
                <strong>2.2.2 Pause, Stop, Hide (Level A):</strong> Control for moving content.
            </div>
        </div>
        
        <div class="guideline">
            <h3>2.3 Seizures and Physical Reactions</h3>
            <p>Do not design content in a way that is known to cause seizures.</p>
            <div class="success-criterion">
                <strong>2.3.1 Three Flashes or Below Threshold (Level A):</strong> No content flashes more than 3 times per second.
            </div>
        </div>
        
        <div class="guideline">
            <h3>2.4 Navigable</h3>
            <p>Provide ways to help users navigate, find content, and determine where they are.</p>
            <div class="success-criterion">
                <strong>2.4.1 Bypass Blocks (Level A):</strong> Skip to content links available.
            </div>
            <div class="success-criterion">
                <strong>2.4.2 Page Titled (Level A):</strong> Descriptive page titles.
            </div>
            <div class="success-criterion">
                <strong>2.4.3 Focus Order (Level A):</strong> Logical focus order.
            </div>
            <div class="success-criterion">
                <strong>2.4.4 Link Purpose (In Context) (Level A):</strong> Clear link text.
            </div>
            <div class="success-criterion">
                <strong>2.4.5 Multiple Ways (Level AA):</strong> Multiple navigation methods.
            </div>
            <div class="success-criterion">
                <strong>2.4.6 Headings and Labels (Level AA):</strong> Descriptive headings and labels.
            </div>
        </div>
    </div>

    <div class="principle">
        <h2>3. Understandable</h2>
        <p>Information and the operation of user interface must be understandable.</p>
        
        <div class="guideline">
            <h3>3.1 Readable</h3>
            <p>Make text content readable and understandable.</p>
            <div class="success-criterion">
                <strong>3.1.1 Language of Page (Level A):</strong> Page language identified.
            </div>
            <div class="success-criterion">
                <strong>3.1.2 Language of Parts (Level AA):</strong> Language changes identified.
            </div>
        </div>
        
        <div class="guideline">
            <h3>3.2 Predictable</h3>
            <p>Make Web pages appear and operate in predictable ways.</p>
            <div class="success-criterion">
                <strong>3.2.1 On Focus (Level A):</strong> No unexpected changes on focus.
            </div>
            <div class="success-criterion">
                <strong>3.2.2 On Input (Level A):</strong> No unexpected changes on input.
            </div>
            <div class="success-criterion">
                <strong>3.2.3 Consistent Navigation (Level AA):</strong> Consistent navigation.
            </div>
            <div class="success-criterion">
                <strong>3.2.4 Consistent Identification (Level AA):</strong> Consistent identification.
            </div>
        </div>
        
        <div class="guideline">
            <h3>3.3 Input Assistance</h3>
            <p>Help users avoid and correct mistakes.</p>
            <div class="success-criterion">
                <strong>3.3.1 Error Identification (Level A):</strong> Errors identified and described.
            </div>
            <div class="success-criterion">
                <strong>3.3.2 Labels or Instructions (Level A):</strong> Labels provided.
            </div>
            <div class="success-criterion">
                <strong>3.3.3 Error Suggestion (Level AA):</strong> Error suggestions provided.
            </div>
            <div class="success-criterion">
                <strong>3.3.4 Error Prevention (Legal, Financial, Data) (Level AA):</strong> Reversible submissions.
            </div>
        </div>
    </div>

    <div class="principle">
        <h2>4. Robust</h2>
        <p>Content must be robust enough that it can be interpreted reliably by a wide variety of user agents, including assistive technologies.</p>
        
        <div class="guideline">
            <h3>4.1 Compatible</h3>
            <p>Maximize compatibility with current and future user agents.</p>
            <div class="success-criterion">
                <strong>4.1.1 Parsing (Level A):</strong> No major code errors.
            </div>
            <div class="success-criterion">
                <strong>4.1.2 Name, Role, Value (Level A):</strong> Assistive technology can access all information.
            </div>
        </div>
    </div>

    <footer>
        <p>Based on WCAG 2.1 guidelines. For more detailed information, visit the <a href="https://www.w3.org/WAI/standards-guidelines/wcag/" target="_blank">official WCAG website</a>.</p>
    </footer>
</body>
</html>

Here's a detailed list of corrections made in the fixed version (the first code example), categorized by POUR principles with explanations of how they address accessibility issues:

Here's a detailed list of corrections made in the fixed version (the first code example), categorized by POUR principles with explanations of how they address accessibility issues:

### **1. Perceivable Corrections**

| **Issue Fixed** | **Correction Applied** | **WCAG Success Criterion** |
|----------------|----------------------|--------------------------|
| Missing text alternatives for images | Added proper `alt` attributes | 1.1.1 Non-text Content (A) |
| Low color contrast | Ensured sufficient contrast (4.5:1) | 1.4.3 Contrast (Minimum) (AA) |
| Color-only information | Added text indicators along with color | 1.4.1 Use of Color (A) |
| Auto-playing audio | Provided controls to pause/stop audio | 1.4.2 Audio Control (A) |
| Blinking/flashing content | Removed or provided warnings | 2.3.1 Three Flashes (A) |
| Non-semantic structure | Used proper HTML5 semantic elements | 1.3.1 Info and Relationships (A) |
| Missing captions for media | Added captions/transcripts | 1.2.2 Captions (A) |

---

### **2. Operable Corrections**

| **Issue Fixed** | **Correction Applied** | **WCAG Success Criterion** |
|----------------|----------------------|--------------------------|
| Keyboard traps | Ensured all content is keyboard-navigable | 2.1.1 Keyboard (A) |
| Missing focus indicators | Visible focus styles for interactive elements | 2.4.7 Focus Visible (AA) |
| Time-limited content | Provided options to extend/time adjustments | 2.2.1 Timing Adjustable (A) |
| No skip links | Added "Skip to Content" links | 2.4.1 Bypass Blocks (A) |
| Unexpected pop-ups/redirects | Removed or made predictable | 3.2.1 On Focus (A) |
| Horizontal scrolling | Responsive design to prevent scrolling | 1.4.4 Resize Text (AA) |

---

### **3. Understandable Corrections**

| **Issue Fixed** | **Correction Applied** | **WCAG Success Criterion** |
|----------------|----------------------|--------------------------|
| Unclear link labels | Changed "Click here" to descriptive text | 2.4.4 Link Purpose (A) |
| Unexpected form submission | Removed auto-submit on blur | 3.2.2 On Input (A) |
| Language not defined | Added `lang="en"` to HTML | 3.1.1 Language of Page (A) |
| Inconsistent navigation | Standardized navigation layout | 3.2.3 Consistent Navigation (AA) |
| Missing form labels | Added `<label>` for all form inputs | 3.3.2 Labels/Instructions (A) |
| Error prevention | Added confirmation for critical actions | 3.3.4 Error Prevention (AA) |

---

### **4. Robust Corrections**

| **Issue Fixed** | **Correction Applied** | **WCAG Success Criterion** |
|----------------|----------------------|--------------------------|
| Invalid HTML elements | Replaced with standard elements | 4.1.1 Parsing (A) |
| Missing ARIA attributes | Added proper `aria-*` roles/states | 4.1.2 Name, Role, Value (A) |
| Browser-specific code | Used cross-browser compatible markup | 4.1.1 Parsing (A) |
| Deprecated elements | Replaced `<font>`/`<center>` with CSS | 4.1.1 Parsing (A) |
| Dynamic content changes | Ensured AT compatibility | 4.1.2 Name, Role, Value (A) |

---

### **Key Improvements Summary:**
1. **Semantic HTML** ‚Äì Proper use of `<header>`, `<nav>`, `<main>`, etc.
2. **Keyboard Accessibility** ‚Äì All functionality works without a mouse.
3. **Clear Structure** ‚Äì Logical heading hierarchy (`<h1>` to `<h6>`).
4. **Form Accessibility** ‚Äì Every input has a associated `<label>`.
5. **Color & Contrast** ‚Äì Text meets WCAG contrast ratios.
6. **No Time Limits** ‚Äì Removed or made adjustable.
7. **Focus Management** ‚Äì Visible focus indicators for keyboard users.
8. **Language Defined** ‚Äì `<html lang="en">` for screen readers.
9. **Error Handling** ‚Äì Clear error messages in forms.
10. **Valid Code** ‚Äì Passes HTML validation with no parsing errors.

This list aligns with **WCAG 2.1 Level AA** standards. Each correction addresses specific failures from the "bad" example while demonstrating accessible best practices.